<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>C++ Content &#8211; imharris</title>
	<atom:link href="https://harriscr7.github.io/imharris/category/c/feed/" rel="self" type="application/rss+xml" />
	<link>https://harriscr7.github.io/imharris</link>
	<description></description>
	<lastBuildDate>Sat, 13 May 2023 22:32:22 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>

<image>
	<url>https://harriscr7.github.io/imharris/wp-content/uploads/2023/05/image_2023-05-14_210105897.png</url>
	<title>C++ Content &#8211; imharris</title>
	<link>https://harriscr7.github.io/imharris</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>C++ Comments</title>
		<link>https://harriscr7.github.io/imharris/c-comments/</link>
					<comments>https://harriscr7.github.io/imharris/c-comments/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:51:12 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=47</guid>

					<description><![CDATA[In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples. C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers. There are two ways to add comments [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about C++ comments, why we use them, and how to use them with the help of examples.</p>



<p id="introduction">C++ comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by C++ compilers.</p>



<p>There are two ways to add comments to code:</p>



<p><code>//</code>&nbsp;&#8211; Single Line Comments</p>



<p><code>/* */</code>&nbsp;-Multi-line Comments</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="single-line">Single Line Comments</h2>



<p>In C++, any line that starts with&nbsp;<code>//</code>&nbsp;is a comment. For example,</p>



<pre class="wp-block-code"><code>// declaring a variable
int a;

// initializing the variable 'a' with the value 2
a = 2;
</code></pre>



<p>Here, we have used two single-line comments:</p>



<ul>
<li><code>// declaring a variable</code></li>



<li><code>// initializing the variable 'a' with the value 2</code></li>
</ul>



<p>We can also use single line comment like this:</p>



<pre class="wp-block-code"><code>int a;    // declaring a variable</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="multi-line">Multi-line comments</h2>



<p>In C++, any line between&nbsp;<code>/*</code>&nbsp;and&nbsp;<code>*/</code>&nbsp;is also a comment. For example,</p>



<pre class="wp-block-code"><code>/* declaring a variable
to store salary to employees
*/
int salary = 2000;
</code></pre>



<p>This syntax can be used to write both single-line and multi-line comments.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="debugging">Using Comments for Debugging</h2>



<p>Comments can also be used to disable code to prevent it from being executed. For example,</p>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;
int main() {
   cout &lt;&lt; "some code";
   cout &lt;&lt; ''error code;
   cout &lt;&lt; "some other code";

   return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p>If we get an error while running the program, instead of removing the error-prone code, we can use comments to disable it from being executed; this can be a valuable debugging tool.</p>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;
int main() {
   cout &lt;&lt; "some code";
   // cout &lt;&lt; ''error code;
   cout &lt;&lt; "some other code";

   return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Pro Tip:</strong>&nbsp;Remember the shortcut for using comments; it can be really helpful. For most code editors, it&#8217;s&nbsp;<code>Ctrl + /</code>&nbsp;for Windows and&nbsp;<code>Cmd + /</code>&nbsp;for Mac.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="why">Why use Comments?</h2>



<p>If we write comments on our code, it will be easier for us to understand the code in the future. Also, it will be easier for your fellow developers to understand the code.</p>



<p><strong>Note:</strong>&nbsp;Comments shouldn&#8217;t be the substitute for a way to explain poorly written code in English. We should always write well-structured and self-explanatory code. And, then use comments.</p>



<p>As a general rule of thumb, use comments to explain&nbsp;<strong>Why</strong>&nbsp;you did something rather than&nbsp;<strong>How</strong>&nbsp;you did something, and you are good.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-comments/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Operators</title>
		<link>https://harriscr7.github.io/imharris/c-operators/</link>
					<comments>https://harriscr7.github.io/imharris/c-operators/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:50:39 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=45</guid>

					<description><![CDATA[In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable. Operators are symbols that perform operations on variables and values. For example,&#160;+&#160;is an operator used for addition, while&#160;-&#160;is an operator used [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the different types of operators in C++ with the help of examples. In programming, an operator is a symbol that operates on a value or a variable.</p>



<p id="introduction">Operators are symbols that perform operations on variables and values. For example,&nbsp;<code>+</code>&nbsp;is an operator used for addition, while&nbsp;<code>-</code>&nbsp;is an operator used for subtraction.</p>



<p>Operators in C++ can be classified into 6 types:</p>



<ol>
<li><a href="https://www.programiz.com/cpp-programming/operators#arithmetic">Arithmetic Operators</a></li>



<li><a href="https://www.programiz.com/cpp-programming/operators#assignment">Assignment Operators</a></li>



<li><a href="https://www.programiz.com/cpp-programming/operators#relational">Relational Operators</a></li>



<li><a href="https://www.programiz.com/cpp-programming/operators#logical">Logical Operators</a></li>



<li><a href="https://www.programiz.com/cpp-programming/operators#bitwise">Bitwise Operators</a></li>



<li><a href="https://www.programiz.com/cpp-programming/operators#other-operators">Other Operators</a></li>
</ol>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="arithmetic">1. C++ Arithmetic Operators</h2>



<p>Arithmetic operators are used to perform arithmetic operations on variables and data. For example,</p>



<pre class="wp-block-code"><code>a + b;</code></pre>



<p>Here, the&nbsp;<code>+</code>&nbsp;operator is used to add two variables&nbsp;<var>a</var>&nbsp;and&nbsp;<var>b</var>. Similarly there are various other arithmetic operators in C++.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Operation</th></tr><tr><td><code>+</code></td><td>Addition</td></tr><tr><td><code>-</code></td><td>Subtraction</td></tr><tr><td><code>*</code></td><td>Multiplication</td></tr><tr><td><code>/</code></td><td>Division</td></tr><tr><td><code>%</code></td><td>Modulo Operation (Remainder after division)</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">Example 1: Arithmetic Operators</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int a, b;
    a = 7;
    b = 2;

    // printing the sum of a and b
    cout &lt;&lt; "a + b = " &lt;&lt; (a + b) &lt;&lt; endl;

    // printing the difference of a and b
    cout &lt;&lt; "a - b = " &lt;&lt; (a - b) &lt;&lt; endl;

    // printing the product of a and b
    cout &lt;&lt; "a * b = " &lt;&lt; (a * b) &lt;&lt; endl;

    // printing the division of a by b
    cout &lt;&lt; "a / b = " &lt;&lt; (a / b) &lt;&lt; endl;

    // printing the modulo of a by b
    cout &lt;&lt; "a % b = " &lt;&lt; (a % b) &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>a + b = 9
a - b = 5
a * b = 14
a / b = 3
a % b = 1</samp></pre>



<p>Here, the operators&nbsp;<code>+</code>,&nbsp;<code>-</code>&nbsp;and&nbsp;<code>*</code>&nbsp;compute addition, subtraction, and multiplication respectively as we might have expected.</p>



<p><strong>/ Division Operator</strong></p>



<p>Note the operation&nbsp;<code>(a / b)</code>&nbsp;in our program. The&nbsp;<code>/</code>&nbsp;operator is the division operator.</p>



<p>As we can see from the above example, if an integer is divided by another integer, we will get the quotient. However, if either divisor or dividend is a floating-point number, we will get the result in decimals.</p>



<pre class="wp-block-preformatted">In C++,

7/2 is 3
7.0 / 2 is 3.5
7 / 2.0 is 3.5
7.0 / 2.0 is 3.5</pre>



<p><strong>% Modulo Operator</strong></p>



<p>The modulo operator&nbsp;<code>%</code>&nbsp;computes the remainder. When&nbsp;<code>a = 9</code>&nbsp;is divided by&nbsp;<code>b = 4</code>, the remainder is&nbsp;<strong>1</strong>.</p>



<p><strong>Note:</strong>&nbsp;The&nbsp;<code>%</code>&nbsp;operator can only be used with integers.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="increment-decrement">Increment and Decrement Operators</h3>



<p>C++ also provides increment and decrement operators:&nbsp;<code>++</code>&nbsp;and&nbsp;<code>--</code>&nbsp;respectively.</p>



<ul>
<li><code>++</code>&nbsp;increases the value of the operand by&nbsp;<strong>1</strong></li>



<li><code>--</code>&nbsp;decreases it by&nbsp;<strong>1</strong></li>
</ul>



<p>For example,</p>



<pre class="wp-block-code"><code>int num = 5;

// increment operator
++num;  // 6</code></pre>



<p>Here, the code&nbsp;<code>++num;</code>&nbsp;increases the value of&nbsp;<var>num</var>&nbsp;by&nbsp;<strong>1</strong>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">Example 2: Increment and Decrement Operators</h3>



<pre class="wp-block-code"><code>// Working of increment and decrement operators

#include &lt;iostream&gt;
using namespace std;

int main() {
    int a = 10, b = 100, result_a, result_b;

    // incrementing a by 1 and storing the result in result_a
    result_a = ++a;
    cout &lt;&lt; "result_a = " &lt;&lt; result_a &lt;&lt; endl;


    // decrementing b by 1 and storing the result in result_b   
    result_b = --b;
    cout &lt;&lt; "result_b = " &lt;&lt; result_b &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>result_a = 11
result_b = 99</samp></pre>



<p>In the above program, we have used the&nbsp;<code>++</code>&nbsp;and&nbsp;<code>--</code>&nbsp;operators as&nbsp;<strong>prefixes (++a and &#8211;b)</strong>. However, we can also use these operators as&nbsp;<strong>postfix (a++ and b&#8211;)</strong>.</p>



<p>To learn more, visit&nbsp;<a href="https://www.programiz.com/article/increment-decrement-operator-difference-prefix-postfix">increment and decrement operators</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="assignment">2. C++ Assignment Operators</h2>



<p>In C++, assignment operators are used to assign values to variables. For example,</p>



<pre class="wp-block-code"><code>// assign 5 to a
a = 5;</code></pre>



<p>Here, we have assigned a value of&nbsp;<code>5</code>&nbsp;to the variable&nbsp;<var>a</var>.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Example</th><th>Equivalent to</th></tr><tr><td><code>=</code></td><td><code>a = b;</code></td><td><code>a = b;</code></td></tr><tr><td><code>+=</code></td><td><code>a += b;</code></td><td><code>a = a + b;</code></td></tr><tr><td><code>-=</code></td><td><code>a -= b;</code></td><td><code>a = a - b;</code></td></tr><tr><td><code>*=</code></td><td><code>a *= b;</code></td><td><code>a = a * b;</code></td></tr><tr><td><code>/=</code></td><td><code>a /= b;</code></td><td><code>a = a / b;</code></td></tr><tr><td><code>%=</code></td><td><code>a %= b;</code></td><td><code>a = a % b;</code></td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">Example 3: Assignment Operators</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int a, b;

    // 2 is assigned to a
    a = 2;

    // 7 is assigned to b
    b = 7;

    cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
    cout &lt;&lt; "\nAfter a += b;" &lt;&lt; endl;

    // assigning the sum of a and b to a
    a += b;  // a = a +b
    cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>a = 2
b = 7

After a += b;
a = 9</samp></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="relational">3. C++ Relational Operators</h2>



<p>A relational operator is used to check the relationship between two operands. For example,</p>



<pre class="wp-block-code"><code>// checks if a is greater than b
a &gt; b;</code></pre>



<p>Here,&nbsp;<code>&gt;</code>&nbsp;is a relational operator. It checks if&nbsp;<var>a</var>&nbsp;is greater than&nbsp;<var>b</var>&nbsp;or not.</p>



<p>If the relation is&nbsp;<strong>true</strong>, it returns&nbsp;<strong>1</strong>&nbsp;whereas if the relation is&nbsp;<strong>false</strong>, it returns&nbsp;<strong>0</strong>.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Meaning</th><th>Example</th></tr><tr><td><code>==</code></td><td>Is Equal To</td><td><code>3 == 5</code> gives us <strong>false</strong></td></tr><tr><td><code>!=</code></td><td>Not Equal To</td><td><code>3 != 5</code> gives us <strong>true</strong></td></tr><tr><td><code>&gt;</code></td><td>Greater Than</td><td><code>3 &gt; 5</code> gives us <strong>false</strong></td></tr><tr><td><code>&lt;</code></td><td>Less Than</td><td><code>3 &lt; 5</code> gives us <strong>true</strong></td></tr><tr><td><code>&gt;=</code></td><td>Greater Than or Equal To</td><td><code>3 &gt;= 5</code> give us <strong>false</strong></td></tr><tr><td><code>&lt;=</code></td><td>Less Than or Equal To</td><td><code>3 &lt;= 5</code> gives us <strong>true</strong></td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">Example 4: Relational Operators</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int a, b;
    a = 3;
    b = 5;
    bool result;

    result = (a == b);   // false
    cout &lt;&lt; "3 == 5 is " &lt;&lt; result &lt;&lt; endl;

    result = (a != b);  // true
    cout &lt;&lt; "3 != 5 is " &lt;&lt; result &lt;&lt; endl;

    result = a &gt; b;   // false
    cout &lt;&lt; "3 &gt; 5 is " &lt;&lt; result &lt;&lt; endl;

    result = a &lt; b;   // true
    cout &lt;&lt; "3 &lt; 5 is " &lt;&lt; result &lt;&lt; endl;

    result = a &gt;= b;  // false
    cout &lt;&lt; "3 &gt;= 5 is " &lt;&lt; result &lt;&lt; endl;

    result = a &lt;= b;  // true
    cout &lt;&lt; "3 &lt;= 5 is " &lt;&lt; result &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>3 == 5 is 0
3 != 5 is 1
3 &gt; 5 is 0
3 &lt; 5 is 1
3 &gt;= 5 is 0
3 &lt;= 5 is 1</samp></pre>



<p><strong>Note</strong>: Relational operators are used in decision-making and loops.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="logical">4. C++ Logical Operators</h2>



<p>Logical operators are used to check whether an expression is&nbsp;<strong>true</strong>&nbsp;or&nbsp;<strong>false</strong>. If the expression is&nbsp;<strong>true</strong>, it returns&nbsp;<strong>1</strong>&nbsp;whereas if the expression is&nbsp;<strong>false</strong>, it returns&nbsp;<strong>0</strong>.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Example</th><th>Meaning</th></tr><tr><td><code>&amp;&amp;</code></td><td>expression1 <strong>&amp;&amp;</strong> expression2</td><td>Logical AND.<br>True only if all the operands are true.</td></tr><tr><td><code>||</code></td><td>expression1 <strong>||</strong> expression2</td><td>Logical OR.<br>True if at least one of the operands is true.</td></tr><tr><td><code>!</code></td><td><strong>!</strong>expression</td><td>Logical NOT.<br>True only if the operand is false.</td></tr></tbody></table></figure>



<p>In C++, logical operators are commonly used in decision making. To further understand the logical operators, let&#8217;s see the following examples,</p>



<pre class="wp-block-code"><code>Suppose,
a = 5
b = 8

Then,

(a &gt; 3) &amp;&amp; (b &gt; 5) evaluates to true
(a &gt; 3)  &amp;&amp; (b &lt; 5) evaluates to false

(a &gt; 3) || (b &gt; 5) evaluates to true
(a &gt; 3) || (b &lt; 5) evaluates to true
(a &lt; 3) || (b &lt; 5) evaluates to false

!(a &lt; 3) evaluates to true
!(a &gt; 3) evaluates to false</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">Example 5: Logical Operators</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    bool result;

    result = (3 != 5) &amp;&amp; (3 &lt; 5);     // true
    cout &lt;&lt; "(3 != 5) &amp;&amp; (3 &lt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = (3 == 5) &amp;&amp; (3 &lt; 5);    // false
    cout &lt;&lt; "(3 == 5) &amp;&amp; (3 &lt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = (3 == 5) &amp;&amp; (3 &gt; 5);    // false
    cout &lt;&lt; "(3 == 5) &amp;&amp; (3 &gt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = (3 != 5) || (3 &lt; 5);    // true
    cout &lt;&lt; "(3 != 5) || (3 &lt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = (3 != 5) || (3 &gt; 5);    // true
    cout &lt;&lt; "(3 != 5) || (3 &gt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = (3 == 5) || (3 &gt; 5);    // false
    cout &lt;&lt; "(3 == 5) || (3 &gt; 5) is " &lt;&lt; result &lt;&lt; endl;

    result = !(5 == 2);    // true
    cout &lt;&lt; "!(5 == 2) is " &lt;&lt; result &lt;&lt; endl;

    result = !(5 == 5);    // false
    cout &lt;&lt; "!(5 == 5) is " &lt;&lt; result &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>(3 != 5) &amp;&amp; (3 &lt; 5) is 1
(3 == 5) &amp;&amp; (3 &lt; 5) is 0
(3 == 5) &amp;&amp; (3 &gt; 5) is 0
(3 != 5) || (3 &lt; 5) is 1
(3 != 5) || (3 &gt; 5) is 1
(3 == 5) || (3 &gt; 5) is 0
!(5 == 2) is 1
!(5 == 5) is 0</samp></pre>



<p><strong>Explanation of logical operator program</strong></p>



<ul>
<li><code>(3 != 5) &amp;&amp; (3 &lt; 5)</code>&nbsp;evaluates to&nbsp;<strong>1</strong>&nbsp;because both operands&nbsp;<code>(3 != 5)</code>&nbsp;and&nbsp;<code>(3 &lt; 5)</code>&nbsp;are&nbsp;<strong>1</strong>&nbsp;(true).</li>



<li><code>(3 == 5) &amp;&amp; (3 &lt; 5)</code>&nbsp;evaluates to&nbsp;<strong>0</strong>&nbsp;because the operand&nbsp;<code>(3 == 5)</code>&nbsp;is&nbsp;<strong>0</strong>&nbsp;(false).</li>



<li><code>(3 == 5) &amp;&amp; (3 &gt; 5)</code>&nbsp;evaluates to&nbsp;<strong>0</strong>&nbsp;because both operands&nbsp;<code>(3 == 5)</code>&nbsp;and&nbsp;<code>(3 &gt; 5)</code>&nbsp;are&nbsp;<strong>0</strong>&nbsp;(false).</li>



<li><code>(3 != 5) || (3 &lt; 5)</code>&nbsp;evaluates to&nbsp;<strong>1</strong>&nbsp;because both operands&nbsp;<code>(3 != 5)</code>&nbsp;and&nbsp;<code>(3 &lt; 5)</code>&nbsp;are&nbsp;<strong>1</strong>&nbsp;(true).</li>



<li><code>(3 != 5) || (3 &gt; 5)</code>&nbsp;evaluates to&nbsp;<strong>1</strong>&nbsp;because the operand&nbsp;<code>(3 != 5)</code>&nbsp;is&nbsp;<strong>1</strong>&nbsp;(true).</li>



<li><code>(3 == 5) || (3 &gt; 5)</code>&nbsp;evaluates to&nbsp;<strong>0</strong>&nbsp;because both operands&nbsp;<code>(3 == 5)</code>&nbsp;and&nbsp;<code>(3 &gt; 5)</code>&nbsp;are&nbsp;<strong>0</strong>&nbsp;(false).</li>



<li><code>!(5 == 2)</code>&nbsp;evaluates to&nbsp;<strong>1</strong>&nbsp;because the operand&nbsp;<code>(5 == 2)</code>&nbsp;is&nbsp;<strong>0</strong>&nbsp;(false).</li>



<li><code>!(5 == 5)</code>&nbsp;evaluates to&nbsp;<strong>0</strong>&nbsp;because the operand&nbsp;<code>(5 == 5)</code>&nbsp;is&nbsp;<strong>1</strong>&nbsp;(true).</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="bitwise">5. C++ Bitwise Operators</h2>



<p>In C++, bitwise operators are used to perform operations on individual bits. They can only be used alongside&nbsp;<code>char</code>&nbsp;and&nbsp;<code>int</code>&nbsp;data types.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td><code>&amp;</code></td><td>Binary AND</td></tr><tr><td><code>|</code></td><td>Binary OR</td></tr><tr><td><code>^</code></td><td>Binary XOR</td></tr><tr><td><code>~</code></td><td>Binary One&#8217;s Complement</td></tr><tr><td><code>&lt;&lt;</code></td><td>Binary Shift Left</td></tr><tr><td><code>&gt;&gt;</code></td><td>Binary Shift Right</td></tr></tbody></table></figure>



<p>To learn more, visit&nbsp;<a href="https://www.programiz.com/cpp-programming/bitwise-operators">C++ bitwise operators</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="other-operators">6. Other C++ Operators</h2>



<p>Here&#8217;s a list of some other common operators available in C++. We will learn about them in later tutorials.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><code>sizeof</code></td><td>returns the size of data type</td><td><code>sizeof(int); // 4</code></td></tr><tr><td><code>?:</code></td><td>returns value based on the condition</td><td><code>string result = (5 &gt; 0) ? "even" : "odd"; // "even"</code></td></tr><tr><td><code>&amp;</code></td><td>represents memory address of the operand</td><td><code>&amp;num; // address of num</code></td></tr><tr><td><code>.</code></td><td>accesses members of struct variables or class objects</td><td><code>s1.marks = 92;</code></td></tr><tr><td><code>-&gt;</code></td><td>used with pointers to access the class or struct variables</td><td><code>ptr-&gt;marks = 92;</code></td></tr><tr><td><code>&lt;&lt;</code></td><td>prints the output value</td><td><code>cout &lt;&lt; 5;</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>gets the input value</td><td><code>cin &gt;&gt; num;</code></td></tr></tbody></table></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-operators/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Type Conversion</title>
		<link>https://harriscr7.github.io/imharris/c-type-conversion/</link>
					<comments>https://harriscr7.github.io/imharris/c-type-conversion/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:48:47 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=43</guid>

					<description><![CDATA[In this tutorial, we will learn about the basics of C++ type conversion with the help of examples. C++ allows us to convert data of one type to that of another. This is known as type conversion. There are two types of type conversion in C++. Implicit Type Conversion The type conversion that is done [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.</p>



<p id="introduction">C++ allows us to convert data of one type to that of another. This is known as type conversion.</p>



<p>There are two types of type conversion in C++.</p>



<ol>
<li>Implicit Conversion</li>



<li>Explicit Conversion (also known as Type Casting)</li>
</ol>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="implicit">Implicit Type Conversion</h2>



<p>The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.</p>



<p>Let us look at two examples of implicit type conversion.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example1">Example 1: Conversion From int to double</h3>



<pre class="wp-block-code"><code>// Working of implicit type-conversion

#include &lt;iostream&gt;
using namespace std;

int main() {
   // assigning an int value to num_int
   int num_int = 9;

   // declaring a double type variable
   double num_double;
 
   // implicit conversion
   // assigning int value to a double variable
   num_double = num_int;

   cout &lt;&lt; "num_int = " &lt;&lt; num_int &lt;&lt; endl;
   cout &lt;&lt; "num_double = " &lt;&lt; num_double &lt;&lt; endl;

   return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>num_int = 9
num_double = 9</samp></pre>



<p>In the program, we have assigned an&nbsp;<code>int</code>&nbsp;data to a&nbsp;<code>double</code>&nbsp;variable.</p>



<pre class="wp-block-code"><code>num_double = num_int;</code></pre>



<p>Here, the&nbsp;<code>int</code>&nbsp;value is automatically converted to&nbsp;<code>double</code>&nbsp;by the compiler before it is assigned to the&nbsp;<var>num_double</var>&nbsp;variable. This is an example of implicit type conversion.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example2">Example 2: Automatic Conversion from double to int</h3>



<pre class="wp-block-code"><code>//Working of Implicit type-conversion

#include &lt;iostream&gt;
using namespace std;

int main() {

   int num_int;
   double num_double = 9.99;

   // implicit conversion
   // assigning a double value to an int variable
   num_int = num_double;

   cout &lt;&lt; "num_int = " &lt;&lt; num_int &lt;&lt; endl;
   cout &lt;&lt; "num_double = " &lt;&lt; num_double &lt;&lt; endl;

   return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>num_int = 9
num_double = 9.99</samp></pre>



<p>In the program, we have assigned a&nbsp;<code>double</code>&nbsp;data to an&nbsp;<code>int</code>&nbsp;variable.</p>



<pre class="wp-block-code"><code>num_int = num_double;</code></pre>



<p>Here, the&nbsp;<code>double</code>&nbsp;value is automatically converted to&nbsp;<code>int</code>&nbsp;by the compiler before it is assigned to the&nbsp;<var>num_int</var>&nbsp;variable. This is also an example of implicit type conversion.</p>



<p><strong>Note:</strong>&nbsp;Since&nbsp;<code>int</code>&nbsp;cannot have a decimal part, the digits after the decimal point are&nbsp;truncated in the above example.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="data-loss">Data Loss During Conversion (Narrowing Conversion)</h3>



<p>As we have seen from the above example, conversion from one data type to another is prone to data loss. This happens when data of a larger type is converted to data of a smaller type.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-type-conversion.png" alt="Data loss in C++ if a larger type of data is converted to a smaller type." title="C++ Type Conversion"/><figcaption class="wp-element-caption">Possible Data Loss During Type Conversion</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="explicit">C++ Explicit Conversion</h2>



<p>When the user manually changes data from one type to another, this is known as&nbsp;<strong>explicit conversion</strong>. This type of conversion is also known as&nbsp;<strong>type casting</strong>.</p>



<p>There are three major ways in which we can use explicit conversion in C++. They are:</p>



<ol>
<li>C-style type casting (also known as&nbsp;<strong>cast notation</strong>)</li>



<li>Function notation (also known as&nbsp;<strong>old C++ style type casting</strong>)</li>



<li>Type conversion operators</li>
</ol>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="c-style-casting">C-style Type Casting</h3>



<p>As the name suggests, this type of casting is favored by the&nbsp;<strong>C programming language</strong>. It is also known as&nbsp;<strong>cast notation</strong>.</p>



<p>The syntax for this style is:</p>



<pre class="wp-block-code"><code>(data_type)expression;</code></pre>



<p>For example,</p>



<pre class="wp-block-code"><code>// initializing int variable
int num_int = 26;

// declaring double variable
double num_double;

// converting from int to double
num_double = (double)num_int;</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="function-notation">Function-style Casting</h3>



<p>We can also use the function like notation to cast data from one type to another.</p>



<p>The syntax for this style is:</p>



<pre class="wp-block-code"><code>data_type(expression);</code></pre>



<p>For example,</p>



<pre class="wp-block-code"><code>// initializing int variable
int num_int = 26;

// declaring double variable
double num_double;

// converting from int to double
num_double = double(num_int);</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example3">Example 3: Type Casting</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;

using namespace std;

int main() {
    // initializing a double variable
    double num_double = 3.56;
    cout &lt;&lt; "num_double = " &lt;&lt; num_double &lt;&lt; endl;

    // C-style conversion from double to int
    int num_int1 = (int)num_double;
    cout &lt;&lt; "num_int1   = " &lt;&lt; num_int1 &lt;&lt; endl;

    // function-style conversion from double to int
    int num_int2 = int(num_double);
    cout &lt;&lt; "num_int2   = " &lt;&lt; num_int2 &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>num_double = 3.56
num_int1   = 3
num_int2   = 3</samp></pre>



<p>We used both the&nbsp;<strong>C style type conversion</strong>&nbsp;and the&nbsp;<strong>function-style casting for type conversion</strong>&nbsp;and displayed the results. Since they perform the same task, both give us the same output.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-type-conversion/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Basic Input/Output</title>
		<link>https://harriscr7.github.io/imharris/c-basic-input-output/</link>
					<comments>https://harriscr7.github.io/imharris/c-basic-input-output/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:48:02 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=41</guid>

					<description><![CDATA[In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples. C++ Output In C++,&#160;cout&#160;sends formatted output to standard output devices, such as the screen. We use the&#160;cout&#160;object along with the&#160;&#60;&#60;&#160;operator for displaying output. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples.</p>



<h2 class="wp-block-heading" id="output">C++ Output</h2>



<p>In C++,&nbsp;<code>cout</code>&nbsp;sends formatted output to standard output devices, such as the screen. We use the&nbsp;<code>cout</code>&nbsp;object along with the&nbsp;<code>&lt;&lt;</code>&nbsp;operator for displaying output.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="output-string">Example 1: String Output</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    // prints the string enclosed in double quotes
    cout &lt;&lt; "This is C++ Programming";
    return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>This is C++ Programming
</samp></pre>



<p><strong>How does this program work?</strong></p>



<ul>
<li>We first include the&nbsp;<code>iostream</code>&nbsp;header file that allows us to display output.</li>



<li>The&nbsp;<code>cout</code>&nbsp;object is defined inside the&nbsp;<code>std</code>&nbsp;namespace. To use the&nbsp;<code>std</code>&nbsp;namespace, we used the&nbsp;<code>using namespace std;</code>&nbsp;statement.</li>



<li>Every C++ program starts with the&nbsp;<code>main()</code>&nbsp;function. The code execution begins from the start of the&nbsp;<code>main()</code>&nbsp;function.</li>



<li><code>cout</code>&nbsp;is an object that prints the string inside quotation marks&nbsp;<code>" "</code>. It is followed by the&nbsp;<code>&lt;&lt;</code>&nbsp;operator.</li>



<li><code>return 0;</code>&nbsp;is the &#8220;exit status&#8221; of the&nbsp;<code>main()</code>&nbsp;function. The program ends with this statement, however, this statement is not mandatory.</li>
</ul>



<p><strong>Note:</strong>&nbsp;If we don&#8217;t include the&nbsp;<code>using namespace std;</code>&nbsp;statement, we need to use&nbsp;<code>std::cout</code>&nbsp;instead of&nbsp;<code>cout</code>.</p>



<p>This is the preferred method as using the&nbsp;<code>std</code>&nbsp;namespace can create potential problems.</p>



<p>However, we have used the&nbsp;<code>std</code>&nbsp;namespace in our tutorials in order to make the codes more readable.</p>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;

int main() {
    // prints the string enclosed in double quotes
    std::cout &lt;&lt; "This is C++ Programming";
    return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="output-integer">Example 2: Numbers and Characters Output</h3>



<p>To print the numbers and character variables, we use the same&nbsp;<code>cout</code>&nbsp;object but without using quotation marks.</p>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int num1 = 70;
    double num2 = 256.783;
    char ch = 'A';

    cout &lt;&lt; num1 &lt;&lt; endl;    // print integer
    cout &lt;&lt; num2 &lt;&lt; endl;    // print double
    cout &lt;&lt; "character: " &lt;&lt; ch &lt;&lt; endl;    // print char
    return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>70
256.783
character: A
</samp></pre>



<p><strong>Notes:</strong></p>



<ul>
<li>The&nbsp;<code>endl</code>&nbsp;manipulator is used to insert a new line. That&#8217;s why each output is displayed in a new line.</li>



<li>The&nbsp;<code>&lt;&lt;</code>&nbsp;operator can be used more than once if we want to print different variables, strings and so on in a single statement. For example:</li>
</ul>



<pre class="wp-block-code"><code>cout &lt;&lt; "character: " &lt;&lt; ch &lt;&lt; endl;</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="input">C++ Input</h2>



<p>In C++,&nbsp;<code>cin</code>&nbsp;takes formatted input from standard input devices such as the keyboard. We use the&nbsp;<code>cin</code>&nbsp;object along with the&nbsp;<code>&gt;&gt;</code>&nbsp;operator for taking input.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="input-integer">Example 3: Integer Input/Output</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int num;
    cout &lt;&lt; "Enter an integer: ";
    cin &gt;&gt; num;   // Taking input
    cout &lt;&lt; "The number is: " &lt;&lt; num;
    return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter an integer: 70
The number is: 70
</samp></pre>



<p>In the program, we used</p>



<pre class="wp-block-code"><code>cin &gt;&gt; num;
</code></pre>



<p>to take input from the user. The input is stored in the variable&nbsp;<var>num</var>. We use the&nbsp;<code>&gt;&gt;</code>&nbsp;operator with&nbsp;<code>cin</code>&nbsp;to take input.</p>



<p><strong>Note:</strong>&nbsp;If we don&#8217;t include the&nbsp;<code>using namespace std;</code>&nbsp;statement, we need to use&nbsp;<code>std::cin</code>&nbsp;instead of&nbsp;<code>cin</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="multiple">C++ Taking Multiple Inputs</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    char a;
    int num;

    cout &lt;&lt; "Enter a character and an integer: ";
    cin &gt;&gt; a &gt;&gt; num;

    cout &lt;&lt; "Character: " &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; "Number: " &lt;&lt; num;

    return 0;
}
</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a character and an integer: F
23
Character: F
Number: 23</samp></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-basic-input-output/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Data Types</title>
		<link>https://harriscr7.github.io/imharris/c-data-types/</link>
					<comments>https://harriscr7.github.io/imharris/c-data-types/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:47:17 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=39</guid>

					<description><![CDATA[In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples. In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example, Here,&#160;age&#160;is a variable of type&#160;int. Meaning, the variable can only [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples.</p>



<p>In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example,</p>



<pre class="wp-block-code"><code>int age = 13;
</code></pre>



<p>Here,&nbsp;<var>age</var>&nbsp;is a variable of type&nbsp;<code>int</code>. Meaning, the variable can only store integers of either 2 or 4 bytes.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="fundamental-types">C++ Fundamental Data Types</h2>



<p>The table below shows the fundamental data types, their meaning, and their sizes (in bytes):</p>



<figure class="wp-block-table"><table><tbody><tr><th>Data Type</th><th>Meaning</th><th>Size (in Bytes)</th></tr><tr><td><code>int</code></td><td>Integer</td><td>2 or 4</td></tr><tr><td><code>float</code></td><td>Floating-point</td><td>4</td></tr><tr><td><code>double</code></td><td>Double Floating-point</td><td>8</td></tr><tr><td><code>char</code></td><td>Character</td><td>1</td></tr><tr><td><code>wchar_t</code></td><td>Wide Character</td><td>2</td></tr><tr><td><code>bool</code></td><td>Boolean</td><td>1</td></tr><tr><td><code>void</code></td><td>Empty</td><td>0</td></tr></tbody></table></figure>



<p>Now, let us discuss these fundamental data types in more detail.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="int">1. C++ int</h3>



<ul>
<li>The&nbsp;<code>int</code>&nbsp;keyword is used to indicate integers.</li>



<li>Its size is usually 4 bytes. Meaning, it can store values from&nbsp;<strong>-2147483648 to 2147483647</strong>.</li>



<li>For example,</li>
</ul>



<pre class="wp-block-code"><code>int salary = 85000;
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="float-double">2. C++ float and double</h3>



<ul>
<li><code>float</code>&nbsp;and&nbsp;<code>double</code>&nbsp;are used to store floating-point numbers (decimals and exponentials).</li>



<li>The size of&nbsp;<code>float</code>&nbsp;is 4 bytes and the size of&nbsp;<code>double</code>&nbsp;is 8 bytes. Hence,&nbsp;<code>double</code>&nbsp;has two times the precision of&nbsp;<code>float</code>. To learn more, visit C++ float and double.</li>



<li>For example,</li>
</ul>



<pre class="wp-block-code"><code>float area = 64.74;
double volume = 134.64534;
</code></pre>



<p>As mentioned above, these two data types are also used for exponentials. For example,</p>



<pre class="wp-block-code"><code>double distance = 45E12    // 45E12 is equal to 45*10^12
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="character">3. C++ char</h3>



<ul>
<li>Keyword&nbsp;<code>char</code>&nbsp;is used for characters.</li>



<li>Its size is 1 byte.</li>



<li>Characters in C++ are enclosed inside single quotes&nbsp;<code>' '</code>.</li>



<li>For example,</li>
</ul>



<pre class="wp-block-code"><code>char test = 'h';
</code></pre>



<p><strong>Note:</strong>&nbsp;In C++, an integer value is stored in a&nbsp;<code>char</code>&nbsp;variable rather than the character itself. To learn more, visit&nbsp;<a href="https://www.programiz.com/cpp-programming/char-type">C++ characters</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="wide-character">4. C++ wchar_t</h3>



<ul>
<li>Wide character&nbsp;<code>wchar_t</code>&nbsp;is similar to the&nbsp;<code>char</code>&nbsp;data type, except its size is 2 bytes instead of 1.</li>



<li>It is used to represent characters that require more memory to represent them than a single&nbsp;<code>char</code>.</li>



<li>For example,</li>
</ul>



<pre class="wp-block-code"><code>wchar_t test = L'ם'  // storing Hebrew character;

</code></pre>



<p>Notice the letter L before the quotation marks.</p>



<p><strong>Note:</strong>&nbsp;There are also two other fixed-size character types&nbsp;<code>char16_t</code>&nbsp;and&nbsp;<code>char32_t</code>&nbsp;introduced in C++11.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="boolean">5. C++ bool</h3>



<ul>
<li>The&nbsp;<code>bool</code>&nbsp;data type has one of two possible values:&nbsp;<code>true</code>&nbsp;or&nbsp;<code>false</code>.</li>



<li>Booleans are used in conditional statements and loops (which we will learn in later chapters).</li>



<li>For example,</li>
</ul>



<pre class="wp-block-code"><code>bool cond = false;
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="void">6. C++ void</h3>



<ul>
<li>The&nbsp;<code>void</code>&nbsp;keyword indicates an absence of data. It means &#8220;nothing&#8221; or &#8220;no value&#8221;.</li>



<li>We will use void when we learn about functions and pointers.</li>
</ul>



<p><strong>Note:</strong>&nbsp;We cannot declare variables of the&nbsp;<code>void</code>&nbsp;type.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="type-modifiers">C++ Type Modifiers</h2>



<p>We can further modify some of the fundamental data types by using type modifiers. There are 4 type modifiers in C++. They are:</p>



<ol>
<li><code>signed</code></li>



<li><code>unsigned</code></li>



<li><code>short</code></li>



<li><code>long</code></li>
</ol>



<p>We can modify the following data types with the above modifiers:</p>



<ul>
<li><code>int</code></li>



<li><code>double</code></li>



<li><code>char</code></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading">C++ Modified Data Types List</h3>



<figure class="wp-block-table"><table><tbody><tr><th>Data Type</th><th>Size (in Bytes)</th><th>Meaning</th></tr><tr><td><code>signed int</code></td><td>4</td><td>used for integers (equivalent to <code>int</code>)</td></tr><tr><td><code>unsigned int</code></td><td>4</td><td>can only store positive integers</td></tr><tr><td><code>short</code></td><td>2</td><td>used for small integers (range <strong>-32768 to 32767</strong>)</td></tr><tr><td><code>unsigned short</code></td><td>2</td><td>used for small positive integers (range <strong>0 to 65,535</strong>)</td></tr><tr><td><code>long</code></td><td>at least 4</td><td>used for large integers (equivalent to <code>long int</code>)</td></tr><tr><td><code>unsigned long</code></td><td>4</td><td>used for large positive integers or 0 (equivalent to <code>unsigned</code> <code>long int</code>)</td></tr><tr><td><code>long long</code></td><td>8</td><td>used for very large integers (equivalent to <code>long long int</code>).</td></tr><tr><td><code>unsigned long long</code></td><td>8</td><td>used for very large positive integers or 0 (equivalent to <code>unsigned long long int</code>)</td></tr><tr><td><code>long double</code></td><td>12</td><td>used for large floating-point numbers</td></tr><tr><td><code>signed char</code></td><td>1</td><td>used for characters (guaranteed range&nbsp;<strong>-127 to 127</strong>)</td></tr><tr><td><code>unsigned char</code></td><td>1</td><td>used for characters (range <strong>0 to 255</strong>)</td></tr></tbody></table></figure>



<p>Let&#8217;s see a few examples.</p>



<pre class="wp-block-code"><code>long b = 4523232;
long int c = 2345342;
long double d = 233434.56343;
short d = 3434233; // Error! out of range
unsigned int a = -5;    // Error! can only store positive numbers or 0
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="derived-types">Derived Data Types</h2>



<p>Data types that are derived from fundamental data types are derived types. For example: arrays, pointers, function types, structures, etc.</p>



<p>We will learn about these derived data types in later tutorials.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-data-types/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Variables, Literals and Constants</title>
		<link>https://harriscr7.github.io/imharris/c-variables-literals-and-constants/</link>
					<comments>https://harriscr7.github.io/imharris/c-variables-literals-and-constants/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:46:07 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=37</guid>

					<description><![CDATA[In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples. C++ Variables In programming, a variable is a container (storage area) to hold data. To indicate the storage area, each variable should be given a unique name (identifier). For example, Here,&#160;age&#160;is a variable of the&#160;int&#160;data type, and [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.</p>



<h2 class="wp-block-heading" id="variables">C++ Variables</h2>



<p>In programming, a variable is a container (storage area) to hold data.</p>



<p>To indicate the storage area, each variable should be given a unique name (identifier). For example,</p>



<pre class="wp-block-code"><code>int age = 14;
</code></pre>



<p>Here,&nbsp;<var>age</var>&nbsp;is a variable of the&nbsp;<code>int</code>&nbsp;data type, and we have assigned an integer value 14 to it.</p>



<p><strong>Note:</strong>&nbsp;The&nbsp;<code>int</code>&nbsp;data type suggests that the variable can only hold integers. Similarly, we can use the&nbsp;<code>double</code>&nbsp;data type if we have to store decimals and exponentials.</p>



<p>We will learn about all the data types in detail in the next tutorial.</p>



<p>The value of a variable can be changed, hence the name&nbsp;<strong>variable</strong>.</p>



<pre class="wp-block-code"><code>int age = 14;   // age is 14
age = 17;       // age is 17
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="naming-rules">Rules for naming a variable</h3>



<ul>
<li>A variable name can only have alphabets, numbers, and the underscore&nbsp;<code>_</code>.</li>



<li>A variable name cannot begin with a number.</li>



<li>It is a preferred practice to begin variable names with a lowercase character. For example,&nbsp;<var>name</var>&nbsp;is preferable to&nbsp;<var>Name</var>.</li>



<li>A variable name cannot be a&nbsp;<a href="https://www.programiz.com/cpp-programming/keywords-identifiers">keyword</a>. For example,&nbsp;<code>int</code>&nbsp;is a keyword that is used to denote integers.</li>



<li>A variable name can start with an underscore. However, it&#8217;s not considered a good practice.</li>
</ul>



<p><strong>Note:</strong>&nbsp;We should try to give meaningful names to variables. For example,&nbsp;<var>first_name</var>&nbsp;is a better variable name than&nbsp;<var>fn</var>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="literals">C++ Literals</h2>



<p>Literals are data used for representing fixed values. They can be used directly in the code. For example:&nbsp;<code>1</code>,&nbsp;<code>2.5</code>,&nbsp;<code>'c'</code>&nbsp;etc.</p>



<p>Here,&nbsp;<code>1</code>,&nbsp;<code>2.5</code>&nbsp;and&nbsp;<code>'c'</code>&nbsp;are literals. Why? You cannot assign different values to these terms.</p>



<p>Here&#8217;s a list of different literals in C++ programming.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="integers">1. Integers</h3>



<p>An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:</p>



<ul>
<li>decimal (base 10)</li>



<li>octal (base 8)</li>



<li>hexadecimal (base 16)</li>
</ul>



<p>For example:</p>



<pre class="wp-block-preformatted">Decimal: 0, -9, 22 etc
Octal: 021, 077, 033 etc
Hexadecimal: 0x7f, 0x2a, 0x521 etc
</pre>



<p>In C++ programming, octal starts with a&nbsp;<code>0</code>, and hexadecimal starts with a&nbsp;<code>0x</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="float">2. Floating-point Literals</h3>



<p>A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:</p>



<p><code>-2.0</code></p>



<p><code>0.0000234</code></p>



<p><code>-0.22E-5</code></p>



<p><strong>Note:</strong>&nbsp;<code>E-5 = 10<sup>-5</sup></code></p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="characters">3. Characters</h3>



<p>A character literal is created by enclosing a single character inside single quotation marks. For example:&nbsp;<code>'a'</code>,&nbsp;<code>'m'</code>,&nbsp;<code>'F'</code>,&nbsp;<code>'2'</code>,&nbsp;<code>'}'</code>&nbsp;etc.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="escapesequence">4. Escape Sequences</h3>



<p>Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.</p>



<p>In order to use these characters, escape sequences are used.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Escape Sequences</th><th>Characters</th></tr><tr><td><code>\b</code></td><td>Backspace</td></tr><tr><td><code>\f</code></td><td>Form feed</td></tr><tr><td><code>\n</code></td><td>Newline</td></tr><tr><td><code>\r</code></td><td>Return</td></tr><tr><td><code>\t</code></td><td>Horizontal tab</td></tr><tr><td><code>\v</code></td><td>Vertical tab</td></tr><tr><td><code>\\</code></td><td>Backslash</td></tr><tr><td><code>\'</code></td><td>Single quotation mark</td></tr><tr><td><code>\"</code></td><td>Double quotation mark</td></tr><tr><td><code>\?</code></td><td>Question mark</td></tr><tr><td><code>\0</code></td><td>Null Character</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="string">5. String Literals</h3>



<p>A string literal is a sequence of characters enclosed in double-quote marks. For example:</p>



<figure class="wp-block-table"><table><tbody><tr><td><code>"good"</code></td><td>string constant</td></tr><tr><td><code>""</code></td><td>null string constant</td></tr><tr><td><code>" "</code></td><td>string constant of six white space</td></tr><tr><td><code>"x"</code></td><td>string constant having a single character</td></tr><tr><td><code>"Earth is round\n"</code></td><td>prints string with a newline</td></tr></tbody></table></figure>



<p>We will learn about strings in detail in the C++ string tutorial.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="constants">C++ Constants</h2>



<p>In C++, we can create variables whose value cannot be changed. For that, we use the&nbsp;<code>const</code>&nbsp;keyword. Here&#8217;s an example:</p>



<pre class="wp-block-code"><code>const int LIGHT_SPEED = 299792458;
LIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant.
</code></pre>



<p>Here, we have used the keyword&nbsp;<code>const</code>&nbsp;to declare a constant named&nbsp;<code>LIGHT_SPEED</code>. If we try to change the value of&nbsp;<code>LIGHT_SPEED</code>, we will get an error.</p>



<p>A constant can also be created using the&nbsp;<code>#define</code>&nbsp;preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-variables-literals-and-constants/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Introduction</title>
		<link>https://harriscr7.github.io/imharris/c-programming/</link>
					<comments>https://harriscr7.github.io/imharris/c-programming/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Sat, 13 May 2023 20:36:00 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=27</guid>

					<description><![CDATA[What is C++? C++ is a cross-platform language that can be used to create high-performance applications. C++ was developed by Bjarne Stroustrup, as an extension to the&#160;C language. C++ gives programmers a high level of control over system resources and memory. The language was updated 4 major times in 2011, 2014, 2017, and 2020 to [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">What is C++?</h2>



<p>C++ is a cross-platform language that can be used to create high-performance applications.</p>



<p>C++ was developed by Bjarne Stroustrup, as an extension to the&nbsp;<a href="https://www.w3schools.com/c/index.php">C language</a>.</p>



<p>C++ gives programmers a high level of control over system resources and memory.</p>



<p>The language was updated 4 major times in 2011, 2014, 2017, and 2020 to C++11, C++14, C++17, C++20.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading">Why Use C++</h2>



<p>C++ is one of the world&#8217;s most popular programming languages.</p>



<p>C++ can be found in today&#8217;s operating systems, Graphical User Interfaces, and embedded systems.</p>



<p>C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.</p>



<p>C++ is portable and can be used to develop applications that can be adapted to multiple platforms.</p>



<p>C++ is fun and easy to learn!</p>



<p>As C++ is close to&nbsp;<a href="https://www.w3schools.com/c/index.php">C</a>,&nbsp;<a href="https://www.w3schools.com/cs/index.php">C#</a>&nbsp;and&nbsp;<a href="https://www.w3schools.com/java/default.asp">Java</a>, it makes it easy for programmers to switch to C++ or vice versa.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading">Difference between C and C++</h2>



<p>C++ was developed as an extension of&nbsp;<a href="https://www.w3schools.com/c/index.php">C</a>, and both languages have almost the same syntax.</p>



<p>The main difference between C and C++ is that C++ support classes and objects, while C does not.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-programming/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Uncategorized &#8211; imharris</title>
	<atom:link href="https://harriscr7.github.io/imharris/category/uncategorized/feed/" rel="self" type="application/rss+xml" />
	<link>https://harriscr7.github.io/imharris</link>
	<description></description>
	<lastBuildDate>Thu, 18 May 2023 20:07:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>

<image>
	<url>https://harriscr7.github.io/imharris/wp-content/uploads/2023/05/image_2023-05-14_210105897.png</url>
	<title>Uncategorized &#8211; imharris</title>
	<link>https://harriscr7.github.io/imharris</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Using Open Function()</title>
		<link>https://harriscr7.github.io/imharris/using-open-function/</link>
					<comments>https://harriscr7.github.io/imharris/using-open-function/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Thu, 18 May 2023 19:51:45 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ File Handling]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=294</guid>

					<description><![CDATA[Using fstream class: To read and write data using fstream in C++, you can follow these steps: include &#60;fstream> fstream file; file.open("filename.txt", ios::in &#124; ios::out); You can also use different variable name, like &#8220;fstream myfile;&#8221; but than you have to replace variable name everywhere. For example &#8220;myfile.open("filename.txt", ios::in &#124; ios::out);" To only read data you [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><strong>Using fstream class:</strong></p>



<p>To read and write data using <code>fstream</code> in C++, you can follow these steps:</p>



<ol>
<li>Include the necessary header file:</li>
</ol>



<pre class="wp-block-preformatted"><code>include &lt;fstream>
</code></pre>



<ol start="2">
<li>Create an instance of <code>fstream</code> and open a file:</li>
</ol>



<pre class="wp-block-preformatted"><code>fstream file;
file.open("filename.txt", ios::in | ios::out);
</code></pre>



<p>You can also use different variable name, like &#8220;fstream myfile;&#8221; but than you have to replace variable name everywhere. </p>



<p>For example &#8220;my<code>file.open("filename.txt", ios::in | ios::out);"</code></p>



<p>To only read data you can only write &#8220;my<code>file.open("filename.txt", ios::in);"</code></p>



<p>To only write you can only write &#8220;my<code>file.open("filename.txt", ios::out);"</code></p>



<p>To do both what you can do is write &#8220;my<code>file.open("filename.txt", ios::in <code>| ios::out</code>);"</code></p>



<figure class="wp-block-table"><table><tbody><tr><td><code>ios::in</code></td><td>Open for input operations.</td></tr><tr><td><code>ios::out</code></td><td>Open for output operations.</td></tr><tr><td><code>ios::binary</code></td><td>Open in binary mode.</td></tr><tr><td><code>ios::ate</code></td><td>Set the initial position at the end of the file.<br>If this flag is not set, the initial position is the beginning of the file.</td></tr><tr><td><code>ios::app</code></td><td>All output operations are performed at the end of the file, appending the content to the current content of the file.</td></tr><tr><td><code>ios::trunc</code></td><td>If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.</td></tr></tbody></table></figure>



<p>Replace <code>"filename.txt"</code> with the actual name and path of the file you want to read and write.</p>



<ol start="3">
<li>Check if the file was opened successfully:</li>
</ol>



<pre class="wp-block-preformatted"><code>if (file.is_open()) {
    // Perform read and write operations
} else {
    // File opening failed, handle the error
}
</code></pre>



<ol start="4">
<li>Read data from the file:</li>
</ol>



<pre class="wp-block-preformatted"><code>// Assuming the file contains text data
string line;
while (getline(file, line)) {
    // Process each line of data
    // Example: print the line
    cout &lt;&lt; line &lt;&lt; endl;
}
</code></pre>



<ol start="5">
<li>Write data to the file:</li>
</ol>



<pre class="wp-block-preformatted"><code>file &lt;&lt; "Hello, World!" &lt;&lt; std::endl;
</code></pre>



<p>This will write the specified text to the file.</p>



<ol start="6">
<li>Close the file when you are done:</li>
</ol>



<pre class="wp-block-preformatted"><code>file.close();
</code></pre>



<p>It&#8217;s important to close the file to release system resources and ensure data integrity.</p>



<p>Here&#8217;s a complete example that demonstrates reading and writing data using <code>std::fstream</code>:</p>



<pre class="wp-block-preformatted"><code>#include &lt;iostream>
#include &lt;fstream>
#include &lt;string>
using namespace std;</code>
<code>
int main() {
    fstream file;
    file.open("data.txt", ios::in | ios::out);

    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            cout &lt;&lt; line &lt;&lt; endl;
        }

        file &lt;&lt; "Hello, World!" &lt;&lt; endl;

        file.close();
    } else {
        cout &lt;&lt; "Failed to open the file." &lt;&lt; endl;
    }

    return 0;
}
</code></pre>



<p>Remember to replace <code>"data.txt"</code> with the actual filename and path you want to read and write.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/using-open-function/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using Constructos</title>
		<link>https://harriscr7.github.io/imharris/using-constructos/</link>
					<comments>https://harriscr7.github.io/imharris/using-constructos/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Thu, 18 May 2023 19:14:44 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ File Handling]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=284</guid>

					<description><![CDATA[IfStream Class: ifstream is a class in C++ that stands for &#8220;input file stream.&#8221; It is used for reading data from files. To use ifstream, you need to include the &#60;fstream&#62; header file in your C++ program. Here&#8217;s a simple example that demonstrates how to use ifstream: #include &#60;fstream> #include &#60;iostream> using namespace std; int [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><strong>IfStream Class:</strong></p>



<p><code>ifstream</code> is a class in C++ that stands for &#8220;input file stream.&#8221; It is used for reading data from files.</p>



<p>To use <code>ifstream</code>, you need to include the <code>&lt;fstream&gt;</code> header file in your C++ program. Here&#8217;s a simple example that demonstrates how to use <code>ifstream</code>:</p>



<pre class="wp-block-preformatted"><code>#include &lt;fstream>
#include &lt;iostream>
using namespace std;
int main() {
    ifstream inputFile("example.txt");  // Open the file "example.txt" for reading

    if (inputFile.is_open()) {  // Check if the file was successfully opened
        string line;
        while (getline(inputFile, line)) {  // Read each line from the file
            cout &lt;&lt; line &lt;&lt; endl;  // Output the line to the console
        }

        inputFile.close();  // Close the file
    } else {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
    }

    return 0;
}
</code></pre>



<p>In this example, we create an <code>ifstream</code> object named <code>inputFile</code> and open the file &#8220;example.txt&#8221; for reading. We then check if the file was successfully opened using the <code>is_open()</code> function. If the file is open, we use a <code>while</code> loop to read each line from the file using <code>std::getline()</code>, and then output each line to the console using <code>std::cout</code>. Finally, we close the file using the <code>close()</code> function.</p>



<p>If the file cannot be opened, an error message is displayed. Remember to provide the correct file path and ensure that the file exists in the specified location.</p>



<p><strong>OfStream Class:</strong></p>



<p><code>ofstream</code> is a class in C++ that stands for &#8220;output file stream.&#8221; It is used for writing data to files.</p>



<p>To use <code>ofstream</code>, you need to include the <code>&lt;fstream&gt;</code> header file in your C++ program. Here&#8217;s a simple example that demonstrates how to use <code>ofstream</code>:</p>



<pre class="wp-block-preformatted"><code>#include &lt;fstream>
#include &lt;iostream>
using namespace std;
int main() {
    ofstream outputFile("example.txt");  // Open/create the file "example.txt" for writing

    if (outputFile.is_open()) {  // Check if the file was successfully opened/created
        outputFile &lt;&lt; "Hello, world!" &lt;&lt; endl;  // Write a string to the file
        outputFile.close();  // Close the file
    } else {
        cout &lt;&lt; "Unable to open/create the file." &lt;&lt; endl;
    }

    return 0;
}
</code></pre>



<p>In this example, we create an <code>ofstream</code> object named <code>outputFile</code> and open/create the file &#8220;example.txt&#8221; for writing. We then check if the file was successfully opened/created using the <code>is_open()</code> function. If the file is open, we can write data to it using the <code>&lt;&lt;</code> operator, just like we would with <code>std::cout</code>. In this case, we write the string &#8220;Hello, world!&#8221; to the file. Finally, we close the file using the <code>close()</code> function.</p>



<p>If the file cannot be opened/created, an error message is displayed. Remember to provide the correct file path and ensure that you have write permissions to the specified location.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/using-constructos/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Sorry For The Inconvenience</title>
		<link>https://harriscr7.github.io/imharris/sorry-for-the-inconvenience/</link>
					<comments>https://harriscr7.github.io/imharris/sorry-for-the-inconvenience/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 21:22:59 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=233</guid>

					<description><![CDATA[Site Launching Soon&#8230;.]]></description>
										<content:encoded><![CDATA[
<p>Site Launching Soon&#8230;.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/sorry-for-the-inconvenience/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Goto Statement</title>
		<link>https://harriscr7.github.io/imharris/c-goto-statement/</link>
					<comments>https://harriscr7.github.io/imharris/c-goto-statement/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:55:50 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=219</guid>

					<description><![CDATA[In this article, you&#8217;ll learn about goto statment, how it works and why should it be avoided. In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program. Syntax of goto Statement goto label; ... .. ... ... .. ... [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this article, you&#8217;ll learn about goto statment, how it works and why should it be avoided.</p>



<p>In C++ programming, the goto statement is used for altering the normal sequence of program execution by transferring control to some other part of the program.</p>



<h2 class="wp-block-heading" id="syntax-of-goto-statement">Syntax of goto Statement</h2>



<pre class="wp-block-preformatted">goto label;
... .. ...
... .. ...
... .. ...
label: 
statement;
... .. ...</pre>



<p>In the syntax above,&nbsp;<var>label</var>&nbsp;is an identifier. When&nbsp;<code>goto label;</code>&nbsp;is encountered, the control of program jumps to&nbsp;<code>label:</code>&nbsp;and executes the code below it.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-goto-working.png" alt="Working of goto statement in C++ programming"/><figcaption class="wp-element-caption">Working of goto in C++</figcaption></figure>



<h3 class="wp-block-heading" id="example-goto-statement">Example: goto Statement</h3>



<pre class="wp-block-code"><code>// This program calculates the average of numbers entered by the user.
// If the user enters a negative number, it ignores the number and 
// calculates the average number entered before it.

# include &lt;iostream&gt;
using namespace std;

int main()
{
    float num, average, sum = 0.0;
    int i, n;

    cout &lt;&lt; "Maximum number of inputs: ";
    cin &gt;&gt; n;

    for(i = 1; i &lt;= n; ++i)
    {
        cout &lt;&lt; "Enter n" &lt;&lt; i &lt;&lt; ": ";
        cin &gt;&gt; num;
        
        if(num &lt; 0.0)
        {
           // Control of the program move to jump:
            goto jump;
        } 
        sum += num;
    }
    
jump:
    average = sum / (i - 1);
    cout &lt;&lt; "\nAverage = " &lt;&lt; average;
    return 0;
}</code></pre>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Maximum number of inputs: 10
Enter n1: 2.3
Enter n2: 5.6
Enter n3: -5.6

Average = 3.95</samp></pre>



<p>You can write any C++ program without the use of&nbsp;<code>goto</code>&nbsp;statement and is generally considered a good idea not to use them.</p>



<h3 class="wp-block-heading" id="reason-to-avoid-goto-statement">Reason to Avoid goto Statement</h3>



<p>The goto statement gives the power to jump to any part of a program but, makes the logic of the program complex and tangled.</p>



<p>In modern programming, the goto statement is considered a harmful construct and a bad programming practice.</p>



<p>The goto statement can be replaced in most of C++ program with the use of&nbsp;<a href="https://www.programiz.com/cpp-programming/break-statement">break</a>&nbsp;and&nbsp;<a href="https://www.programiz.com/cpp-programming/continue-statement">continue</a>&nbsp;statements.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-goto-statement/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Storage Class</title>
		<link>https://harriscr7.github.io/imharris/c-storage-class/</link>
					<comments>https://harriscr7.github.io/imharris/c-storage-class/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:53:52 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=213</guid>

					<description><![CDATA[In this article, you&#8217;ll learn about different storage classes in C++. Namely: local, global, static local, register and thread local. Every variable in C++ has two features: type and storage class. Type specifies the type of data that can be stored in a variable. For example:&#160;int,&#160;float,&#160;char&#160;etc. And, storage class controls two different properties of a [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this article, you&#8217;ll learn about different storage classes in C++. Namely: local, global, static local, register and thread local.</p>



<p>Every variable in C++ has two features: type and storage class.</p>



<p>Type specifies the type of data that can be stored in a variable. For example:&nbsp;<code>int</code>,&nbsp;<code>float</code>,&nbsp;<code>char</code>&nbsp;etc.</p>



<p>And, storage class controls two different properties of a variable: lifetime (determines how long a variable can exist) and scope (determines which part of the program can access it).</p>



<p>Depending upon the storage class of a variable, it can be divided into 4 major types:</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/storage-class#local_variable">Local variable</a></li>



<li><a href="https://www.programiz.com/cpp-programming/storage-class#global_variable">Global variable</a></li>



<li><a href="https://www.programiz.com/cpp-programming/storage-class#static_variable">Static local variable</a></li>



<li><a href="https://www.programiz.com/cpp-programming/storage-class#register%20variable">Register Variable</a></li>



<li><a href="https://www.programiz.com/cpp-programming/storage-class#thread_local_storage">Thread Local Storage</a></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="local-variable"><a></a>Local Variable</h2>



<p>A variable defined inside a function (defined inside&nbsp;<a href="https://www.programiz.com/cpp-programming/function">function</a>&nbsp;body between braces) is called a local variable or automatic variable.</p>



<p>Its scope is only limited to the function where it is defined. In simple terms, local variable exists and can be accessed only inside a function.</p>



<p>The life of a local variable ends (It is destroyed) when the function exits.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-1-local-variable">Example 1: Local variable</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

void test();

int main() 
{
    // local variable to main()
    int var = 5;

    test();
    
    // illegal: var1 not declared inside main()
    var1 = 9;
}

void test()
{
    // local variable to test()
    int var1;
    var1 = 6;

    // illegal: var not declared inside test()
    cout &lt;&lt; var;
}</code></pre>



<p>The variable&nbsp;<var>var</var>&nbsp;cannot be used inside&nbsp;<code>test()</code>&nbsp;and&nbsp;<var>var1</var>&nbsp;cannot be used inside&nbsp;<code>main()</code>&nbsp;function.</p>



<p>Keyword&nbsp;<code>auto</code>&nbsp;was also used for defining local variables before as:&nbsp;<code>auto int var;</code></p>



<p>But, after&nbsp;<a href="http://en.cppreference.com/w/cpp/language/auto">C++11&nbsp;<code>auto</code></a>&nbsp;has a different meaning and should not be used for defining local variables.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="global-variable"><a></a>Global Variable</h2>



<p>If a variable is defined outside all functions, then it is called a global variable.</p>



<p>The scope of a global variable is the whole program. This means, It can be used and changed at any part of the program after its declaration.</p>



<p>Likewise, its life ends only when the program ends.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-2-global-variable">Example 2: Global variable</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// Global variable declaration
int c = 12;

void test();

int main()
{
    ++c;

    // Outputs 13
    cout &lt;&lt; c &lt;&lt;endl;
    test();

    return 0;
}

void test()
{
    ++c;

    // Outputs 14
    cout &lt;&lt; c;
}</code></pre>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>13
14</samp></pre>



<p>In the above program,&nbsp;<var>c</var>&nbsp;is a global variable.</p>



<p>This variable is visible to both functions&nbsp;<code>main()</code>&nbsp;and&nbsp;<code>test()</code>&nbsp;in the above program.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="static-local-variable"><a></a>Static Local variable</h3>



<p>Keyword&nbsp;<code>static</code>&nbsp;is used for specifying a static variable. For example:</p>



<pre class="wp-block-preformatted">... .. ...
int main()
{
   static float a;
   ... .. ...
}
</pre>



<p>A static local variable exists only inside a function where it is declared (similar to a local variable) but its lifetime starts when the function is called and ends only when the program ends.</p>



<p>The main difference between local variable and static variable is that, the value of static variable persists the end of the program.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-3-static-local-variable">Example 3: Static local variable</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

void test()
{
    // var is a static variable
    static int var = 0;
    ++var;

    cout &lt;&lt; var &lt;&lt; endl;
}

int main()
{
    
    test();
    test();

    return 0;
}</code></pre>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1
2</samp></pre>



<p>In the above program,&nbsp;<code>test()</code>&nbsp;function is invoked 2 times.</p>



<p>During the first call, variable&nbsp;<var>var</var>&nbsp;is declared as static variable and initialized to 0. Then 1 is added to&nbsp;<var>var</var>&nbsp;which is displayed in the screen.</p>



<p>When the function test() returns, variable&nbsp;<var>var</var>&nbsp;still exists because it is a static variable.</p>



<p>During second function call, no new variable&nbsp;<var>var</var>&nbsp;is created. The same&nbsp;<var>var</var>&nbsp;is increased by 1 and then displayed to the screen.</p>



<p><strong>Output of above program if&nbsp;<code>var</code>&nbsp;was not specified as static variable</strong></p>



<pre class="wp-block-preformatted"><samp>1
1</samp></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="register-variable-deprecated-in-c-11"><a></a>Register Variable (Deprecated in C++11)</h2>



<p>Keyword&nbsp;<code>register</code>&nbsp;is used for specifying register variables.</p>



<p>Register variables are similar to automatic variables and exists inside a particular function only. It is supposed to be faster than the local variables.</p>



<p>If a program encounters a register variable, it stores the variable in processor&#8217;s register rather than memory if available. This makes it faster than the local variables.</p>



<p>However, this keyword was deprecated in C++11 and should not be used.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-storage-class/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

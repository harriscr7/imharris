<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>C++ Content &#8211; imharris</title>
	<atom:link href="https://harriscr7.github.io/imharris/category/c/feed/" rel="self" type="application/rss+xml" />
	<link>https://harriscr7.github.io/imharris</link>
	<description></description>
	<lastBuildDate>Wed, 17 May 2023 18:19:07 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>

<image>
	<url>https://harriscr7.github.io/imharris/wp-content/uploads/2023/05/image_2023-05-14_210105897.png</url>
	<title>C++ Content &#8211; imharris</title>
	<link>https://harriscr7.github.io/imharris</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>C++ Return by Reference</title>
		<link>https://harriscr7.github.io/imharris/c-return-by-reference/</link>
					<comments>https://harriscr7.github.io/imharris/c-return-by-reference/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:54:39 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ FlowControl]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=217</guid>

					<description><![CDATA[In this article, you&#8217;ll learn how to return a value by reference in a function and use it efficiently in your program. In C++ Programming, not only can you pass values by reference to a&#160;function&#160;but you can also return a value by reference. To understand this feature, you should have the knowledge of: Example: Return [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this article, you&#8217;ll learn how to return a value by reference in a function and use it efficiently in your program.</p>



<p>In C++ Programming, not only can you pass values by reference to a&nbsp;<a href="https://www.programiz.com/cpp-programming/function">function</a>&nbsp;but you can also return a value by reference.</p>



<p>To understand this feature, you should have the knowledge of:</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/storage-class#global_variable">Global variables</a></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-return-by-reference">Example: Return by Reference</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// global variable
int num;

// function declaration
int&amp; test();

int main() {

&nbsp; // assign 5 to num variable
&nbsp; // equivalent to num = 5;
  test() = 5;

  cout &lt;&lt; num;

  return 0;
}

// function definition
// returns the address of num variable
int&amp; test() {
  return num;
}</code></pre>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>5</samp></pre>



<p>In program above, the return type of function&nbsp;<code>test()</code>&nbsp;is&nbsp;<code>int&amp;</code>. Hence, this function returns a reference of the variable&nbsp;<var>num</var>.</p>



<p>The return statement is&nbsp;<code>return num;</code>. Unlike return by value, this statement doesn&#8217;t return value of&nbsp;<var>num</var>, instead it returns the variable itself (address).</p>



<p>So, when the&nbsp;<strong>variable</strong>&nbsp;is returned, it can be assigned a value as done in&nbsp;<code>test() = 5;</code></p>



<p>This stores&nbsp;<strong>5</strong>&nbsp;to the variable&nbsp;<var>num</var>, which is displayed onto the screen.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="important-things-to-remember-when-returning-by-reference">Important Things to Remember When Returning by Reference.</h3>



<ul>
<li>Ordinary function returns value but this function doesn&#8217;t. Hence, you cannot return a constant from the function.int&amp; test() { return 2; }</li>



<li>You cannot return a local variable from this function.int&amp; test() { int n = 2; return n; }</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-return-by-reference/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Recursion</title>
		<link>https://harriscr7.github.io/imharris/c-recursion/</link>
					<comments>https://harriscr7.github.io/imharris/c-recursion/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:54:14 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ Functions]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=215</guid>

					<description><![CDATA[In this tutorial, we will learn about recursive function in C++ and its working with the help of examples. A&#160;function&#160;that calls itself is known as a recursive function. And, this technique is known as recursion. Working of Recursion in C++ The figure below shows how recursion works by calling itself over and over again. The [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about recursive function in C++ and its working with the help of examples.</p>



<p id="introduction">A&nbsp;<a href="https://www.programiz.com/cpp-programming/function">function</a>&nbsp;that calls itself is known as a recursive function. And, this technique is known as recursion.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="working">Working of Recursion in C++</h2>



<pre class="wp-block-code"><code>void recurse()
{
    ... .. ...
    recurse();
    ... .. ...
}

int main()
{
    ... .. ...
    recurse();
    ... .. ...
}</code></pre>



<p>The figure below shows how recursion works by calling itself over and over again.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-recursion-working.png" alt="Working of C++ recursion" title="Working of C++ recursion"/><figcaption class="wp-element-caption">How recursion works in C++ programming</figcaption></figure>



<p>The recursion continues until some condition is met.</p>



<p>To prevent infinite recursion,&nbsp;<a href="https://www.programiz.com/cpp-programming/if-else">if&#8230;else statement</a>&nbsp;(or similar approach) can be used where one branch makes the recursive call and the other doesn&#8217;t.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-1-factorial-of-a-number-using-recursion">Example 1: Factorial of a Number Using Recursion</h2>



<pre class="wp-block-code"><code>// Factorial of n = 1*2*3*...*n

#include &lt;iostream&gt;
using namespace std;

int factorial(int);

int main() {
    int n, result;

    cout &lt;&lt; "Enter a non-negative number: ";
    cin &gt;&gt; n;

    result = factorial(n);
    cout &lt;&lt; "Factorial of " &lt;&lt; n &lt;&lt; " = " &lt;&lt; result;
    return 0;
}

int factorial(int n) {
    if (n &gt; 1) {
        return n * factorial(n - 1);
    } else {
        return 1;
    }
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a non-negative number: 4
Factorial of 4 = 24</samp></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="working-of-factorial-program">Working of Factorial Program</h3>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-recursion-example.png" alt="Working of C++ Recursion Program" title="Working of C++ Recursion Program"/><figcaption class="wp-element-caption">How this C++ recursion program works</figcaption></figure>



<p>As we can see, the&nbsp;<code>factorial()</code>&nbsp;function is calling itself. However, during each call, we have decreased the value of&nbsp;<var>n</var>&nbsp;by&nbsp;<code>1</code>. When&nbsp;<var>n</var>&nbsp;is less than&nbsp;<code>1</code>, the&nbsp;<code>factorial()</code>&nbsp;function ultimately returns the output.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="advantages-and-disadvantages-of-recursion">Advantages and Disadvantages of Recursion</h2>



<p>Below are the pros and cons of using recursion in C++.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="pros">Advantages of C++ Recursion</h3>



<ul>
<li>It makes our code shorter and cleaner.</li>



<li>Recursion is required in problems concerning data structures and advanced algorithms, such as Graph and Tree Traversal.</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="cons">Disadvantages of C++ Recursion</h3>



<ul>
<li>It takes a lot of stack space compared to an iterative program.</li>



<li>It uses more processor time.</li>



<li>It can be more difficult to debug compared to an equivalent iterative program.</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-recursion/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Programming Default Arguments (Parameters)</title>
		<link>https://harriscr7.github.io/imharris/c-programming-default-arguments-parameters/</link>
					<comments>https://harriscr7.github.io/imharris/c-programming-default-arguments-parameters/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:52:46 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ Functions]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=211</guid>

					<description><![CDATA[In this tutorial, we will learn C++ default arguments and their working with the help of examples. In C++ programming, we can provide default values for&#160;function&#160;parameters. If a function with default arguments is called without passing arguments, then the default parameters are used. However, if arguments are passed while calling the function, the default arguments [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn C++ default arguments and their working with the help of examples.</p>



<p id="introduction">In C++ programming, we can provide default values for&nbsp;<a href="https://www.programiz.com/cpp-programming/function">function</a>&nbsp;parameters.</p>



<p>If a function with default arguments is called without passing arguments, then the default parameters are used.</p>



<p>However, if arguments are passed while calling the function, the default arguments are ignored.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="working">Working of default arguments</h2>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-default-parameters.png" alt="Working of Default Arguments in C++ Programming" title="Working of Default Arguments in C++"/><figcaption class="wp-element-caption">How default arguments work in C++</figcaption></figure>



<p>We can understand the working of default arguments from the image above:</p>



<ol>
<li>When&nbsp;<code>temp()</code>&nbsp;is called, both the default parameters are used by the function.</li>



<li>When&nbsp;<code>temp(6)</code>&nbsp;is called, the first argument becomes&nbsp;<code>6</code>&nbsp;while the default value is used for the second parameter.</li>



<li>When&nbsp;<code>temp(6, -2.3)</code>&nbsp;is called, both the default parameters are overridden, resulting in&nbsp;<code>i = 6</code>&nbsp;and&nbsp;<code>f = -2.3</code>.</li>



<li>When&nbsp;<code>temp(3.4)</code>&nbsp;is passed, the function behaves in an undesired way because the second argument cannot be passed without passing the first argument.<br><br>Therefore,&nbsp;<code>3.4</code>&nbsp;is passed as the first argument. Since the first argument has been defined as&nbsp;<code>int</code>, the value that is actually passed is&nbsp;<code>3</code>.</li>
</ol>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example">Example: Default Argument</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// defining the default arguments
void display(char = '*', int = 3);

int main() {
    int count = 5;

    cout &lt;&lt; "No argument passed: ";
    // *, 3 will be parameters
    display(); 
    
    cout &lt;&lt; "First argument passed: ";
     // #, 3 will be parameters
    display('#'); 
    
    cout &lt;&lt; "Both arguments passed: ";
    // $, 5 will be parameters
    display('$', count); 

    return 0;
}

void display(char c, int count) {
    for(int i = 1; i &lt;= count; ++i)
    {
        cout &lt;&lt; c;
    }
    cout &lt;&lt; endl;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>No argument passed: ***
First argument passed: ###
Both arguments passed: $$$$$</samp></pre>



<p>Here is how this program works:</p>



<ol>
<li><code>display()</code>&nbsp;is called without passing any arguments. In this case,&nbsp;<code>display()</code>&nbsp;uses both the default parameters&nbsp;<code>c = '*'</code>&nbsp;and&nbsp;<code>n = 1</code>.</li>



<li><code>display('#')</code>&nbsp;is called with only one argument. In this case, the first becomes&nbsp;<code>'#'</code>. The second default parameter&nbsp;<code>n = 1</code>&nbsp;is retained.</li>



<li><code>display('#', count)</code>&nbsp;is called with both arguments. In this case, default arguments are not used.</li>
</ol>



<p>We can also define the default parameters in the function definition itself. The program below is equivalent to the one above.</p>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// defining the default arguments
void display(char c = '*', int count = 3) {
    for(int i = 1; i &lt;= count; ++i) {
        cout &lt;&lt; c;
    }
    cout &lt;&lt; endl;
}

int main() {
    int count = 5;

    cout &lt;&lt; "No argument passed: ";
    // *, 3 will be parameters
    display(); 
    
    cout &lt;&lt; "First argument passed: ";
     // #, 3 will be parameters
    display('#'); 
    
    cout &lt;&lt; "Both argument passed: ";
    // $, 5 will be parameters
    display('$', count); 

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="remember">Things to Remember</h2>



<ol>
<li>Once we provide a default value for a parameter, all subsequent parameters must also have default values. For example,<code>// Invalid void add(int a, int b = 3, int c, int d); // Invalid void add(int a, int b = 3, int c, int d = 4); // Valid void add(int a, int c, int b = 3, int d = 4);</code></li>



<li>If we are defining the default arguments in the function definition instead of the function prototype, then the function must be defined before the function call.<code>// Invalid code int main() { // function call display(); } void display(char c = '*', int count = 5) { // code }</code></li>
</ol>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-programming-default-arguments-parameters/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Function Overloading</title>
		<link>https://harriscr7.github.io/imharris/c-function-overloading/</link>
					<comments>https://harriscr7.github.io/imharris/c-function-overloading/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:52:15 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ Functions]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=209</guid>

					<description><![CDATA[In this tutorial, we will learn about the function overloading in C++ with examples. In C++, two functions can have the same name if the number and/or type of arguments passed is different. These functions having the same name but different arguments are known as overloaded functions. For example: Here, all 4 functions are overloaded [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the function overloading in C++ with examples.</p>



<p id="introduction">In C++, two functions can have the same name if the number and/or type of arguments passed is different.</p>



<p>These functions having the same name but different arguments are known as overloaded functions. For example:</p>



<pre class="wp-block-code"><code>// same name different arguments
int test() { }
int test(int a) { }
float test(double a) { }
int test(int a, double b) { }</code></pre>



<p>Here, all 4 functions are overloaded functions.</p>



<p>Notice that the return types of all these 4 functions are not the same. Overloaded functions may or may not have different return types but they must have different arguments. For example,</p>



<pre class="wp-block-code"><code>// Error code
int test(int a) { }
double test(int b){ }</code></pre>



<p>Here, both functions have the same name, the same type, and the same number of arguments. Hence, the compiler will throw an error.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example1">Example 1: Overloading Using Different Types of Parameter</h2>



<pre class="wp-block-code"><code>// Program to compute absolute value
// Works for both int and float

#include &lt;iostream&gt;
using namespace std;

// function with float type parameter
float absolute(float var){
    if (var &lt; 0.0)
        var = -var;
    return var;
}

// function with int type parameter
int absolute(int var) {
     if (var &lt; 0)
         var = -var;
    return var;
}

int main() {
    
    // call function with int type parameter
    cout &lt;&lt; "Absolute value of -5 = " &lt;&lt; absolute(-5) &lt;&lt; endl;

    // call function with float type parameter
    cout &lt;&lt; "Absolute value of 5.5 = " &lt;&lt; absolute(5.5f) &lt;&lt; endl;
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Absolute value of -5 = 5
Absolute value of 5.5 = 5.5</samp></pre>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-overloading-parameters-type.png" alt="Working of C++ Function Overloading for absolute()" title="Working of C++ Function Overloading for absolute()"/><figcaption class="wp-element-caption">Working of overloading for the absolute() function</figcaption></figure>



<p>In this program, we overload the&nbsp;<code>absolute()</code>&nbsp;function. Based on the type of parameter passed during the function call, the corresponding function is called.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example2">Example 2: Overloading Using Different Number of Parameters</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// function with 2 parameters
void display(int var1, double var2) {
    cout &lt;&lt; "Integer number: " &lt;&lt; var1;
    cout &lt;&lt; " and double number: " &lt;&lt; var2 &lt;&lt; endl;
}

// function with double type single parameter
void display(double var) {
    cout &lt;&lt; "Double number: " &lt;&lt; var &lt;&lt; endl;
}

// function with int type single parameter
void display(int var) {
    cout &lt;&lt; "Integer number: " &lt;&lt; var &lt;&lt; endl;
}

int main() {

    int a = 5;
    double b = 5.5;

    // call function with int type parameter
    display(a);

    // call function with double type parameter
    display(b);

    // call function with 2 parameters
    display(a, b);

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Integer number: 5
Float number: 5.5
Integer number: 5 and double number: 5.5</samp></pre>



<p>Here, the&nbsp;<code>display()</code>&nbsp;function is called three times with different arguments. Depending on the number and type of arguments passed, the corresponding&nbsp;<code>display()</code>&nbsp;function is called.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-overloading-parameters-number.png" alt="Working of C++ Function Overloading for display()" title="Working of C++ Function Overloading for display()"/><figcaption class="wp-element-caption">Working of overloading for the display() function</figcaption></figure>



<p>The return type of all these functions is the same but that need not be the case for function overloading.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>Note:</strong>&nbsp;In C++, many standard library functions are overloaded. For example, the&nbsp;<code>sqrt()</code>&nbsp;function can take&nbsp;<code>double</code>,&nbsp;<code>float</code>,&nbsp;<code>int,</code>&nbsp;etc. as parameters. This is possible because the&nbsp;<code>sqrt()</code>&nbsp;function is overloaded in C++.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-function-overloading/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ User-defined Function Types</title>
		<link>https://harriscr7.github.io/imharris/c-user-defined-function-types/</link>
					<comments>https://harriscr7.github.io/imharris/c-user-defined-function-types/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:51:37 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ Functions]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=207</guid>

					<description><![CDATA[In this tutorial, you will learn about different approaches you can take to solve a single problem using functions. For better understanding of arguments and return in functions, user-defined functions can be categorised as: Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, you will learn about different approaches you can take to solve a single problem using functions.</p>



<p>For better understanding of arguments and return in functions, user-defined functions can be categorised as:</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/user-defined-function-types#no_argument_no_return">Function with no argument&nbsp;and no return value</a></li>



<li><a href="https://www.programiz.com/cpp-programming/user-defined-function-types#no_argument_yes_return">Function with no argument but return value</a></li>



<li><a href="https://www.programiz.com/cpp-programming/user-defined-function-types#yes_argument_no_return">Function with argument but no return value</a></li>



<li><a href="https://www.programiz.com/cpp-programming/user-defined-function-types#yes_argument_yes_return">Function with argument and return value</a></li>
</ul>



<p>Consider a situation in which you have to check prime number. This problem is solved below by making user-defined function in 4 different ways as mentioned above.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-1-no-arguments-passed-and-no-return-value"><a></a>Example 1: No arguments passed and no return value</h2>



<pre class="wp-block-code"><code># include &lt;iostream&gt;
using namespace std;

void prime();

int main()
{
    // No argument is passed to prime()
    prime();
    return 0;
}


// Return type of function is void because value is not returned.
void prime()
{

    int num, i, flag = 0;

    cout &lt;&lt; "Enter a positive integer enter to check: ";
    cin &gt;&gt; num;

    for(i = 2; i &lt;= num/2; ++i)
    {
        if(num % i == 0)
        {
            flag = 1; 
            break;
        }
    }

    if (flag == 1)
    {
        cout &lt;&lt; num &lt;&lt; " is not a prime number.";
    }
    else
    {
        cout &lt;&lt; num &lt;&lt; " is a prime number.";
    }
}
</code></pre>



<p>In the above program,&nbsp;<code>prime()</code>&nbsp;is called from the main() with no arguments.</p>



<p><code>prime()</code>&nbsp;takes the positive number from the user and checks whether the number is a prime number or not.</p>



<p>Since, return type of&nbsp;<code>prime()</code>&nbsp;is&nbsp;<code>void</code>, no value is returned from the function.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-2-no-arguments-passed-but-a-return-value"><a></a>Example 2: No arguments passed but a return value</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int prime();

int main()
{
    int num, i, flag = 0;

    // No argument is passed to prime()
    num = prime();
    for (i = 2; i &lt;= num/2; ++i)
    {
        if (num%i == 0)
        {
            flag = 1;
            break;
        }
    }

    if (flag == 1)
    {
        cout&lt;&lt;num&lt;&lt;" is not a prime number.";
    }
    else
    {
        cout&lt;&lt;num&lt;&lt;" is a prime number.";
    }
    return 0;
}

// Return type of function is int
int prime()
{
    int n;

    printf("Enter a positive integer to check: ");
    cin &gt;&gt; n;

    return n;
}</code></pre>



<p>In the above program,&nbsp;<code>prime()</code>&nbsp;function is called from the&nbsp;<code>main()</code>&nbsp;with no arguments.</p>



<p><code>prime()</code>&nbsp;takes a positive integer from the user. Since, return type of the function is an&nbsp;<code>int</code>, it returns the inputted number from the user back to the calling&nbsp;<code>main()</code>&nbsp;function.</p>



<p>Then, whether the number is prime or not is checked in the main() itself and printed onto the screen.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-3-arguments-passed-but-no-return-value"><a></a>Example 3: Arguments passed but no return value</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

void prime(int n);

int main()
{
    int num;
    cout &lt;&lt; "Enter a positive integer to check: ";
    cin &gt;&gt; num;
    
    // Argument num is passed to the function prime()
    prime(num);
    return 0;
}

// There is no return value to calling function. Hence, return type of function is void. */
void prime(int n)
{
    int i, flag = 0;
    for (i = 2; i &lt;= n/2; ++i)
    {
        if (n%i == 0)
        {
            flag = 1;
            break;
        }
    }

    if (flag == 1)
    {
        cout &lt;&lt; n &lt;&lt; " is not a prime number.";
    }
    else {
        cout &lt;&lt; n &lt;&lt; " is a prime number.";
    }
}</code></pre>



<p>In the above program, positive number is first asked from the user which is stored in the variable&nbsp;<var>num</var>.</p>



<p>Then,&nbsp;<var>num</var>&nbsp;is passed to the&nbsp;<code>prime()</code>&nbsp;function where, whether the number is prime or not is checked and printed.</p>



<p>Since, the return type of&nbsp;<code>prime()</code>&nbsp;is a&nbsp;<code>void</code>, no value is returned from the function.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example-4-arguments-passed-and-a-return-value"><a></a>Example 4: Arguments passed and a return value.</h2>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

int prime(int n);

int main()
{
    int num, flag = 0;
    cout &lt;&lt; "Enter positive integer to check: ";
    cin &gt;&gt; num;

    // Argument num is passed to check() function
    flag = prime(num);

    if(flag == 1)
        cout &lt;&lt; num &lt;&lt; " is not a prime number.";
    else
        cout&lt;&lt; num &lt;&lt; " is a prime number.";
    return 0;
}

/* This function returns integer value.  */
int prime(int n)
{
    int i;
    for(i = 2; i &lt;= n/2; ++i)
    {
        if(n % i == 0)
            return 1;
    }

    return 0;
}
</code></pre>



<p>In the above program, a positive integer is asked from the user and stored in the variable&nbsp;<code>num</code>.</p>



<p>Then,&nbsp;<code>num</code>&nbsp;is passed to the function&nbsp;<code>prime()</code>&nbsp;where, whether the number is prime or not is checked.</p>



<p>Since, the return type of&nbsp;<code>prime()</code>&nbsp;is an&nbsp;<code>int</code>, 1 or 0 is returned to the&nbsp;<code>main()</code>&nbsp;calling function. If the number is a prime number, 1 is returned. If not, 0 is returned.</p>



<p>Back in the&nbsp;<code>main()</code>&nbsp;function, the returned 1 or 0 is stored in the variable&nbsp;<var>flag</var>, and the corresponding text is printed onto the screen.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="which-method-is-better">Which method is better?</h2>



<p>All four programs above gives the same output and all are technically correct program.</p>



<p>There is no hard and fast rule on which method should be chosen.</p>



<p>The particular method is chosen depending upon the situation and how you want to solve a problem.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-user-defined-function-types/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Functions</title>
		<link>https://harriscr7.github.io/imharris/c-functions/</link>
					<comments>https://harriscr7.github.io/imharris/c-functions/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:50:58 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ Functions]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=205</guid>

					<description><![CDATA[In this tutorial, we will learn about the C++ function and function expressions with the help of examples. A function is a block of code that performs a specific task. Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem: Dividing a [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the C++ function and function expressions with the help of examples.</p>



<p id="introduction">A function is a block of code that performs a specific task.</p>



<p>Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem:</p>



<ul>
<li>a function to draw the circle</li>



<li>a function to color the circle</li>
</ul>



<p>Dividing a complex problem into smaller chunks makes our program easy to understand and reusable.</p>



<p>There are two types of function:</p>



<ol>
<li><strong>Standard Library Functions:</strong>&nbsp;Predefined in C++</li>



<li><strong>User-defined Function:</strong>&nbsp;Created by users</li>
</ol>



<p>In this tutorial, we will focus mostly on user-defined functions.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="user-defined">C++ User-defined Function</h2>



<p>C++ allows the programmer to define their own function.</p>



<p>A user-defined function groups code to perform a specific task and that group of code is given a name (identifier).</p>



<p>When the function is invoked from any part of the program, it all executes the codes defined in the body of the function.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="declare">C++ Function Declaration</h3>



<p>The syntax to declare a function is:</p>



<pre class="wp-block-code"><code>returnType functionName (parameter1, parameter2,...) {
    // function body   
}</code></pre>



<p>Here&#8217;s an example of a function declaration.<br>&nbsp;</p>



<pre class="wp-block-code"><code>// function declaration
void greet() {
    cout &lt;&lt; "Hello World";
}</code></pre>



<p>Here,</p>



<ul>
<li>the name of the function is&nbsp;<code>greet()</code></li>



<li>the return type of the function is&nbsp;<code>void</code></li>



<li>the empty parentheses mean it doesn&#8217;t have any parameters</li>



<li>the function body is written inside&nbsp;<code>{}</code></li>
</ul>



<p><strong>Note:</strong>&nbsp;We will learn about&nbsp;<code>returnType</code>&nbsp;and&nbsp;<code>parameters</code>&nbsp;later in this tutorial.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="call">Calling a Function</h3>



<p>In the above program, we have declared a function named&nbsp;<code>greet()</code>. To use the&nbsp;<code>greet()</code>&nbsp;function, we need to call it.</p>



<p>Here&#8217;s how we can call the above&nbsp;<code>greet()</code>&nbsp;function.</p>



<pre class="wp-block-code"><code>int main() {
     
    // calling a function   
    greet(); 

}</code></pre>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-call.png" alt="Working of C++ function" title="Working of C++ function"/><figcaption class="wp-element-caption">How Function works in C++</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example1">Example 1: Display a Text</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
using namespace std;

// declaring a function
void greet() {
    cout &lt;&lt; "Hello there!";
}

int main() {

    // calling the function
    greet();

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Hello there!</samp></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="function-parameters">Function Parameters</h3>



<p>As mentioned above, a function can be declared with parameters (arguments). A parameter is a value that is passed when declaring a function.</p>



<p>For example, let us consider the function below:</p>



<pre class="wp-block-code"><code>void printNum(int num) {
    cout &lt;&lt; num;
}</code></pre>



<p>Here, the&nbsp;<code>int</code>&nbsp;variable&nbsp;<var>num</var>&nbsp;is the function parameter.</p>



<p>We pass a value to the function parameter while calling the function.</p>



<pre class="wp-block-code"><code>int main() {
    int n = 7;
    
    // calling the function
    // n is passed to the function as argument
    printNum(n);
    
    return 0;
}</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-2-function-with-parameters">Example 2: Function with Parameters</h3>



<pre class="wp-block-code"><code>// program to print a text

#include &lt;iostream&gt;
using namespace std;

// display a number
void displayNum(int n1, float n2) {
    cout &lt;&lt; "The int number is " &lt;&lt; n1;
    cout &lt;&lt; "The double number is " &lt;&lt; n2;
}

int main() {
     
     int num1 = 5;
     double num2 = 5.5;

    // calling the function
    displayNum(num1, num2);

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>The int number is 5
The double number is 5.5</samp></pre>



<p>In the above program, we have used a function that has one&nbsp;<code>int</code>&nbsp;parameter and one&nbsp;<code>double</code>&nbsp;parameter.</p>



<p>We then pass&nbsp;<var>num1</var>&nbsp;and&nbsp;<var>num2</var>&nbsp;as arguments. These values are stored by the function parameters&nbsp;<var>n1</var>&nbsp;and&nbsp;<var>n2</var>&nbsp;respectively.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-parameters.png" alt="C++ function with parameters" title="C++ function with parameters"/><figcaption class="wp-element-caption">C++ function with parameters</figcaption></figure>



<p><strong>Note:</strong>&nbsp;The type of the arguments passed while calling the function must match with the corresponding parameters defined in the function declaration.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="return">Return Statement</h3>



<p>In the above programs, we have used void in the function declaration. For example,</p>



<pre class="wp-block-code"><code>void displayNumber() {
    // code
}</code></pre>



<p>This means the function is not returning any value.</p>



<p>It&#8217;s also possible to return a value from a function. For this, we need to specify the&nbsp;<code>returnType</code>&nbsp;of the function during function declaration.</p>



<p>Then, the&nbsp;<code>return</code>&nbsp;statement can be used to return a value from a function.</p>



<p>For example,</p>



<pre class="wp-block-code"><code>int add (int a, int b) {
   return (a + b);
}</code></pre>



<p>Here, we have the data type&nbsp;<code>int</code>&nbsp;instead of&nbsp;<code>void</code>. This means that the function returns an&nbsp;<code>int</code>&nbsp;value.</p>



<p>The code&nbsp;<code>return (a + b);</code>&nbsp;returns the sum of the two parameters as the function value.</p>



<p>The&nbsp;<code>return</code>&nbsp;statement denotes that the function has ended. Any code after&nbsp;<code>return</code>&nbsp;inside the function is not executed.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-3-add-two-numbers">Example 3: Add Two Numbers</h3>



<pre class="wp-block-code"><code>// program to add two numbers using a function

#include &lt;iostream&gt;

using namespace std;

// declaring a function
int add(int a, int b) {
    return (a + b);
}

int main() {

    int sum;
    
    // calling the function and storing
    // the returned value in sum
    sum = add(100, 78);

    cout &lt;&lt; "100 + 78 = " &lt;&lt; sum &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>100 + 78 = 178</samp></pre>



<p>In the above program, the&nbsp;<code>add()</code>&nbsp;function is used to find the sum of two numbers.</p>



<p>We pass two&nbsp;<code>int</code>&nbsp;literals&nbsp;<code>100</code>&nbsp;and&nbsp;<code>78</code>&nbsp;while calling the function.</p>



<p>We store the returned value of the function in the variable&nbsp;<var>sum</var>, and then we print it.</p>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-function-return-statement.png" alt="Working of C++ Function with return statement " title="Working of C++ Function with return statement"/><figcaption class="wp-element-caption">Working of C++ Function with return statement</figcaption></figure>



<p>Notice that&nbsp;<var>sum</var>&nbsp;is a variable of&nbsp;<code>int</code>&nbsp;type. This is because the return value of&nbsp;<code>add()</code>&nbsp;is of&nbsp;<code>int</code>&nbsp;type.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="function-prototype">Function Prototype</h3>



<p>In C++, the code of function declaration should be before the function call. However, if we want to define a function after the function call, we need to use the function prototype. For example,</p>



<pre class="wp-block-code"><code>// function prototype
void add(int, int);

int main() {
    // calling the function before declaration.
    add(5, 3);
    return 0;
}

// function definition
void add(int a, int b) {
    cout &lt;&lt; (a + b);
}</code></pre>



<p>In the above code, the function prototype is:</p>



<pre class="wp-block-code"><code>void add(int, int);</code></pre>



<p>This provides the compiler with information about the function name and its parameters. That&#8217;s why we can use the code to call a function before the function has been defined.</p>



<p>The syntax of a function prototype is:</p>



<pre class="wp-block-code"><code>returnType functionName(dataType1, dataType2, ...);</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-4-c-function-prototype">Example 4: C++ Function Prototype</h3>



<pre class="wp-block-code"><code>// using function definition after main() function
// function prototype is declared before main()

#include &lt;iostream&gt;

using namespace std;

// function prototype
int add(int, int);

int main() {
    int sum;

    // calling the function and storing
    // the returned value in sum
    sum = add(100, 78);

    cout &lt;&lt; "100 + 78 = " &lt;&lt; sum &lt;&lt; endl;

    return 0;
}

// function definition
int add(int a, int b) {
    return (a + b);
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>100 + 78 = 178</samp></pre>



<p>The above program is nearly identical to&nbsp;<strong>Example 3</strong>. The only difference is that here, the function is defined&nbsp;<strong>after</strong>&nbsp;the function call.</p>



<p>That&#8217;s why we have used a function prototype in this example.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="benefits">Benefits of Using User-Defined Functions</h3>



<ul>
<li>Functions make the code reusable. We can declare them once and use them multiple times.</li>



<li>Functions make the program easier as each small task is divided into a function.</li>



<li>Functions increase readability.</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="library-functions">C++ Library Functions</h2>



<p>Library functions are the built-in functions in C++ programming.</p>



<p>Programmers can use library functions by invoking the functions directly; they don&#8217;t need to write the functions themselves.</p>



<p>Some common library functions in C++ are&nbsp;<code>sqrt()</code>,&nbsp;<code>abs()</code>,&nbsp;<code>isdigit()</code>, etc.</p>



<p>In order to use library functions, we usually need to include the header file in which these library functions are defined.</p>



<p>For instance, in order to use mathematical functions such as&nbsp;<code>sqrt()</code>&nbsp;and&nbsp;<code>abs()</code>, we need to include the header file&nbsp;<code>cmath</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-5-c-program-to-find-the-square-root-of-a-number">Example 5: C++ Program to Find the Square Root of a Number</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

int main() {
    double number, squareRoot;
    
    number = 25.0;

    // sqrt() is a library function to calculate the square root
    squareRoot = sqrt(number);

    cout &lt;&lt; "Square root of " &lt;&lt; number &lt;&lt; " = " &lt;&lt; squareRoot;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Square root of 25 = 5</samp></pre>



<p>In this program, the&nbsp;<code>sqrt()</code>&nbsp;library function is used to calculate the square root of a number.</p>



<p>The function declaration of&nbsp;<code>sqrt()</code>&nbsp;is defined in the&nbsp;<code>cmath</code>&nbsp;header file. That&#8217;s why we need to use the code&nbsp;<code>#include &lt;cmath&gt;</code>&nbsp;to use the&nbsp;<code>sqrt()</code>&nbsp;function.</p>



<p>To learn more, visit&nbsp;<a href="https://www.programiz.com/cpp-programming/library-function">C++ Standard Library functions</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-functions/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Continue Statement</title>
		<link>https://harriscr7.github.io/imharris/c-continue-statement/</link>
					<comments>https://harriscr7.github.io/imharris/c-continue-statement/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:39:29 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ FlowControl]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=197</guid>

					<description><![CDATA[In this tutorial, we will learn about the continue statement and its working with loops with the help of examples. In computer programming, the&#160;continue&#160;statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration. The syntax of the&#160;continue&#160;statement is: Before you learn about the [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the continue statement and its working with loops with the help of examples.</p>



<p id="introduction">In computer programming, the&nbsp;<code>continue</code>&nbsp;statement is used to skip the current iteration of the loop and the control of the program goes to the next iteration.</p>



<p>The syntax of the&nbsp;<code>continue</code>&nbsp;statement is:</p>



<pre class="wp-block-code"><code>continue;</code></pre>



<p>Before you learn about the continue statement, make sure you know about,</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/for-loop">C++ for loop</a></li>



<li><a href="https://www.programiz.com/cpp-programming/for-loop">C++ if&#8230;else</a></li>



<li><a href="https://www.programiz.com/cpp-programming/do-while-loop">C++ while loop</a></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="working">Working of C++ continue Statement</h2>



<figure class="wp-block-image"><img decoding="async" src="https://www.programiz.com/sites/tutorial2program/files/cpp-continue-statement_1.png" alt="Working of C++ continue Statement" title="Working of continue statement in C++"/><figcaption class="wp-element-caption">Working of continue statement in C++</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="continue-for">Example 1: continue with for loop</h2>



<p>In a&nbsp;<code>for</code>&nbsp;loop,&nbsp;<code>continue</code>&nbsp;skips the current iteration and the control flow jumps to the&nbsp;<code>update</code>&nbsp;expression.</p>



<pre class="wp-block-code"><code>// program to print the value of i

#include &lt;iostream&gt;
using namespace std;

int main() {
    for (int i = 1; i &lt;= 5; i++) {
        // condition to continue
        if (i == 3) {
            continue;
        }

        cout &lt;&lt; i &lt;&lt; endl;
    }

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1
2
4
5</samp></pre>



<p>In the above program, we have used the the&nbsp;<code>for</code>&nbsp;loop to print the value of&nbsp;<var>i</var>&nbsp;in each iteration. Here, notice the code,</p>



<pre class="wp-block-code"><code>if (i == 3) {
    continue;
}</code></pre>



<p>This means</p>



<ul>
<li>When&nbsp;<var>i</var>&nbsp;is equal to&nbsp;<code>3</code>, the&nbsp;<code>continue</code>&nbsp;statement skips the current iteration and starts the next iteration</li>



<li>Then,&nbsp;<var>i</var>&nbsp;becomes&nbsp;<code>4</code><strong>,</strong>&nbsp;and the&nbsp;<code>condition</code>&nbsp;is evaluated again.</li>



<li>Hence,&nbsp;<code>4</code>&nbsp;and&nbsp;<code>5</code>&nbsp;are printed in the next two iterations.</li>
</ul>



<p><strong>Note</strong>: The&nbsp;<code>continue</code>&nbsp;statement is almost always used with decision-making statements.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="continue-while">Example 2: continue with while loop</h2>



<p>In a&nbsp;<code>while</code>&nbsp;loop,&nbsp;<code>continue</code>&nbsp;skips the current iteration and control flow of the program jumps back to the&nbsp;<code>while</code>&nbsp;<code>condition</code>.</p>



<pre class="wp-block-code"><code>// program to calculate positive numbers till 50 only
// if the user enters a negative number,
// that number is skipped from the calculation

// negative number -&gt; loop terminate
// numbers above 50 -&gt; skip iteration

#include &lt;iostream&gt;
using namespace std;

int main() {
    int sum = 0;
    int number = 0;

    while (number &gt;= 0) {
        // add all positive numbers
        sum += number;

        // take input from the user
        cout &lt;&lt; "Enter a number: ";
        cin &gt;&gt; number;

        // continue condition
        if (number &gt; 50) {
            cout &lt;&lt; "The number is greater than 50 and won't be calculated." &lt;&lt; endl;
            number = 0;  // the value of number is made 0 again
            continue;
        }
    }

    // display the sum
    cout &lt;&lt; "The sum is " &lt;&lt; sum &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a number: 12
Enter a number: 0
Enter a number: 2
Enter a number: 30
Enter a number: 50
Enter a number: 56
The number is greater than 50 and won't be calculated.
Enter a number: 5
Enter a number: -3
The sum is 99 </samp></pre>



<p>In the above program, the user enters a number. The&nbsp;<code>while</code>&nbsp;loop is used to print the total sum of positive numbers entered by the user, as long as the numbers entered are not greater than&nbsp;<code>50</code>.</p>



<p>Notice the use of the&nbsp;<code>continue</code>&nbsp;statement.</p>



<pre class="wp-block-code"><code> if (number &gt; 50){
    continue;
}</code></pre>



<ul>
<li>When the user enters a number greater than&nbsp;<code>50</code>, the&nbsp;<code>continue</code>&nbsp;statement skips the current iteration. Then the control flow of the program goes to the&nbsp;<code>condition</code>&nbsp;of&nbsp;<code>while</code>&nbsp;loop.</li>



<li>When the user enters a number less than&nbsp;<code>0</code>, the loop terminates.</li>
</ul>



<p><strong>Note</strong>: The&nbsp;<code>continue</code>&nbsp;statement works in the same way for the&nbsp;<code>do...while</code>&nbsp;loops.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="nested">continue with Nested loop</h2>



<p>When&nbsp;<code>continue</code>&nbsp;is used with nested loops, it skips the current iteration of the inner loop. For example,</p>



<pre class="wp-block-code"><code>// using continue statement inside
// nested for loop

#include &lt;iostream&gt;
using namespace std;

int main() {
    int number;
    int sum = 0;

    // nested for loops

    // first loop
    for (int i = 1; i &lt;= 3; i++) {
        // second loop
        for (int j = 1; j &lt;= 3; j++) {
            if (j == 2) {
                continue;
            }
            cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; ", j = " &lt;&lt; j &lt;&lt; endl;
        }
    }

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>i = 1, j = 1
i = 1, j = 3
i = 2, j = 1
i = 2, j = 3
i = 3, j = 1
i = 3, j = 3</samp></pre>



<p>In the above program, when the&nbsp;<code>continue</code>&nbsp;statement executes, it skips the current iteration in the inner loop. And the control of the program moves to the&nbsp;<strong>update expression</strong>&nbsp;of the inner loop.</p>



<p>Hence, the value of&nbsp;<samp>j = 2</samp>&nbsp;is never displayed in the output.</p>



<p><strong>Note</strong>: The&nbsp;<a href="https://www.programiz.com/cpp-programming/break-statement">break statement</a>&nbsp;terminates the loop entirely. However, the&nbsp;<code>continue</code>&nbsp;statement only skips the current iteration.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-continue-statement/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ Break Statement</title>
		<link>https://harriscr7.github.io/imharris/c-break-statement/</link>
					<comments>https://harriscr7.github.io/imharris/c-break-statement/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:38:58 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ FlowControl]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=195</guid>

					<description><![CDATA[In this tutorial, we will learn about the break statement and its working in loops with the help of examples. In C++, the&#160;break&#160;statement terminates the loop when it is encountered. The syntax of the&#160;break&#160;statement is: Before you learn about the&#160;break&#160;statement, make sure you know about: Working of C++ break Statement Example 1: break with for [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the break statement and its working in loops with the help of examples.</p>



<p id="introduction">In C++, the&nbsp;<code>break</code>&nbsp;statement terminates the loop when it is encountered.</p>



<p>The syntax of the&nbsp;<code>break</code>&nbsp;statement is:</p>



<pre class="wp-block-code"><code>break;</code></pre>



<p>Before you learn about the&nbsp;<code>break</code>&nbsp;statement, make sure you know about:</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/for-loop">C++ for loop</a></li>



<li><a href="https://www.programiz.com/cpp-programming/for-loop">C++ if&#8230;else</a></li>



<li><a href="https://www.programiz.com/cpp-programming/do-while-loop">C++ while loop</a></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="working">Working of C++ break Statement</h2>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-break-statement.png" alt="Working of C++ break Statement" title="Working of break statement in C++"/><figcaption class="wp-element-caption">Working of break statement in C++</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example1">Example 1: break with for loop</h2>



<pre class="wp-block-code"><code>// program to print the value of i

#include &lt;iostream&gt;
using namespace std;

int main() {
    for (int i = 1; i &lt;= 5; i++) {
        // break condition     
        if (i == 3) {
            break;
        }
        cout &lt;&lt; i &lt;&lt; endl;
    }

return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1
2</samp></pre>



<p>In the above program, the&nbsp;<code>for</code>&nbsp;loop is used to print the value of&nbsp;<var>i</var>&nbsp;in each iteration. Here, notice the code:</p>



<pre class="wp-block-code"><code>if (i == 3) {
    break;
}</code></pre>



<p>This means, when&nbsp;<var>i</var>&nbsp;is equal to&nbsp;<strong>3</strong>, the&nbsp;<code>break</code>&nbsp;statement terminates the loop. Hence, the output doesn&#8217;t include values greater than or equal to 3.</p>



<p>Note: The&nbsp;<code>break</code>&nbsp;statement is usually used with decision-making statements.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="example2">Example 2: break with while loop</h2>



<pre class="wp-block-code"><code>// program to find the sum of positive numbers
// if the user enters a negative numbers, break ends the loop
// the negative number entered is not added to sum

#include &lt;iostream&gt;
using namespace std;

int main() {
    int number;
    int sum = 0;

    while (true) {
        // take input from the user
        cout &lt;&lt; "Enter a number: ";
        cin &gt;&gt; number;

        // break condition
        if (number &lt; 0) {
            break;
        }

        // add all positive numbers
        sum += number;
    }

    // display the sum
    cout &lt;&lt; "The sum is " &lt;&lt; sum &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a number: 1
Enter a number: 2
Enter a number: 3
Enter a number: -5
The sum is 6. </samp></pre>



<p>In the above program, the user enters a number. The&nbsp;<code>while</code>&nbsp;loop is used to print the total sum of numbers entered by the user. Here, notice the code,</p>



<pre class="wp-block-code"><code>if(number &lt; 0) {
    break;
}</code></pre>



<p>This means, when the user enters a negative number, the&nbsp;<code>break</code>&nbsp;statement terminates the loop and codes outside the loop are executed.</p>



<p>The&nbsp;<code>while</code>&nbsp;loop continues until the user enters a negative number.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="nested">break with Nested loop</h2>



<p>When&nbsp;<code>break</code>&nbsp;is used with nested loops,&nbsp;<code>break</code>&nbsp;terminates the inner loop. For example,</p>



<pre class="wp-block-code"><code>// using break statement inside
// nested for loop

#include &lt;iostream&gt;
using namespace std;

int main() {
    int number;
    int sum = 0;

    // nested for loops

    // first loop
    for (int i = 1; i &lt;= 3; i++) {
        // second loop
        for (int j = 1; j &lt;= 3; j++) {
            if (i == 2) {
                break;
            }
            cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; ", j = " &lt;&lt; j &lt;&lt; endl;
        }
    }

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>i = 1, j = 1
i = 1, j = 2
i = 1, j = 3
i = 3, j = 1
i = 3, j = 2
i = 3, j = 3</samp></pre>



<p>In the above program, the&nbsp;<code>break</code>&nbsp;statement is executed when&nbsp;<code>i == 2</code>. It terminates the inner loop, and the control flow of the program moves to the outer loop.</p>



<p>Hence, the value of&nbsp;<samp>i = 2</samp>&nbsp;is never displayed in the output.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p>The&nbsp;<code>break</code>&nbsp;statement is also used with the&nbsp;<code>switch</code>&nbsp;statement. To learn more, visit&nbsp;<a href="https://www.programiz.com/cpp-programming/switch-case">C++ switch statement</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-break-statement/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ While and do&#8230;while Loop</title>
		<link>https://harriscr7.github.io/imharris/c-while-and-do-while-loop/</link>
					<comments>https://harriscr7.github.io/imharris/c-while-and-do-while-loop/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:38:15 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ FlowControl]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=193</guid>

					<description><![CDATA[In this tutorial, we will learn the use of while and do&#8230;while loops in C++ programming with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let&#8217;s say we want to show a message 100 times. Then instead of writing the print statement 100 times, [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn the use of while and do&#8230;while loops in C++ programming with the help of some examples.</p>



<p id="introduction">In computer programming, loops are used to repeat a block of code.</p>



<p>For example, let&#8217;s say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.</p>



<p>That was just a simple example;&nbsp;we can achieve much more efficiency and sophistication in our programs by making effective use of&nbsp;loops.</p>



<p>There are&nbsp;<strong>3</strong>&nbsp;types of loops in C++.</p>



<ol>
<li><code>for</code>&nbsp;loop</li>



<li><code>while</code>&nbsp;loop</li>



<li><code>do...while</code>&nbsp;loop</li>
</ol>



<p>In the previous tutorial, we learned about the&nbsp;<a href="https://www.programiz.com/cpp-programming/for-loop">C++ for loop</a>. Here, we are going to learn about&nbsp;<code>while</code>&nbsp;and&nbsp;<code>do...while</code>&nbsp;loops.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="while-loop">C++ while Loop</h2>



<p>The syntax of the&nbsp;<code>while</code>&nbsp;loop is:</p>



<pre class="wp-block-code"><code>while (condition) {
    // body of the loop
}</code></pre>



<p>Here,</p>



<ul>
<li>A&nbsp;<code>while</code>&nbsp;loop evaluates the&nbsp;<code>condition</code></li>



<li>If the&nbsp;<code>condition</code>&nbsp;evaluates to&nbsp;<code>true</code>, the code inside the&nbsp;<code>while</code>&nbsp;loop is executed.</li>



<li>The&nbsp;<code>condition</code>&nbsp;is evaluated again.</li>



<li>This process continues until the&nbsp;<code>condition</code>&nbsp;is&nbsp;<code>false</code>.</li>



<li>When the&nbsp;<code>condition</code>&nbsp;evaluates to&nbsp;<code>false</code>, the loop terminates.</li>
</ul>



<p>To learn more about the&nbsp;<code>conditions</code>, visit&nbsp;<a href="https://www.programiz.com/cpp-programming/relational-logical-operators">C++ Relational and Logical Operators</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="flowchart-of-while-loop">Flowchart of while Loop</h3>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-while-loop-flowchart.png" alt="C++ while loop flowchart" title="C++ while loop flowchart"/><figcaption class="wp-element-caption">Flowchart of C++ while loop</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example1">Example 1: Display Numbers from 1 to 5</h3>



<pre class="wp-block-code"><code>// C++ Program to print numbers from 1 to 5

#include &lt;iostream&gt;

using namespace std;

int main() {
    int i = 1; 

    // while loop from 1 to 5
    while (i &lt;= 5) {
        cout &lt;&lt; i &lt;&lt; " ";
        ++i;
    }
    
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1 2 3 4 5</samp></pre>



<p>Here is how the program works.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Iteration</th><th>Variable</th><th>i &lt;= 5</th><th>Action</th></tr><tr><td>1st</td><td><code>i = 1</code></td><td><code>true</code></td><td><samp>1</samp> is printed and <code>i</code> is increased to <code>2</code>.</td></tr><tr><td>2nd</td><td><code>i = 2</code></td><td><code>true</code></td><td><samp>2</samp> is printed and <code>i</code> is increased to <code>3</code>.</td></tr><tr><td>3rd</td><td><code>i = 3</code></td><td><code>true</code></td><td><samp>3</samp> is printed and <code>i</code> is increased to <code>4</code></td></tr><tr><td>4th</td><td><code>i = 4</code></td><td><code>true</code></td><td><samp>4</samp> is printed and <code>i</code> is increased to <code>5</code>.</td></tr><tr><td>5th</td><td><code>i = 5</code></td><td><code>true</code></td><td><samp>5</samp> is printed and <code>i</code> is increased to <code>6</code>.</td></tr><tr><td>6th</td><td><code>i = 6</code></td><td><code>false</code></td><td>The loop is terminated</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example2">Example 2: Sum of Positive Numbers Only</h3>



<pre class="wp-block-code"><code>// program to find the sum of positive numbers
// if the user enters a negative number, the loop ends
// the negative number entered is not added to the sum

#include &lt;iostream&gt;
using namespace std;

int main() {
    int number;
    int sum = 0;

    // take input from the user
    cout &lt;&lt; "Enter a number: ";
    cin &gt;&gt; number;

    while (number &gt;= 0) {
        // add all positive numbers
        sum += number;

        // take input again if the number is positive
        cout &lt;&lt; "Enter a number: ";
        cin &gt;&gt; number;
    }

    // display the sum
    cout &lt;&lt; "\nThe sum is " &lt;&lt; sum &lt;&lt; endl;
    
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a number: 6
Enter a number: 12
Enter a number: 7
Enter a number: 0
Enter a number: -2

The sum is 25</samp></pre>



<p>In this program, the user is prompted to enter a number, which is stored in the variable&nbsp;<var>number</var>.</p>



<p>In order to store the sum of the numbers, we declare a variable&nbsp;<var>sum</var>&nbsp;and initialize it to the value of&nbsp;<code>0</code>.</p>



<p>The&nbsp;<code>while</code>&nbsp;loop continues until the user enters a negative number. During each iteration, the number entered by the user is added to the&nbsp;<var>sum</var>&nbsp;variable.</p>



<p>When the user enters a negative number, the loop terminates. Finally, the total sum is displayed.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="do-while-loop">C++ do&#8230;while Loop</h2>



<p>The&nbsp;<code>do...while</code>&nbsp;loop is a variant of the&nbsp;<code>while</code>&nbsp;loop with one important difference: the body of&nbsp;<code>do...while</code>&nbsp;loop is executed once before the&nbsp;<code>condition</code>&nbsp;is checked.</p>



<p>Its syntax is:</p>



<pre class="wp-block-code"><code>do {
   // body of loop;
}
while (condition);</code></pre>



<p>Here,</p>



<ul>
<li>The body of the loop is executed at first. Then the&nbsp;<code>condition</code>&nbsp;is evaluated.</li>



<li>If the&nbsp;<code>condition</code>&nbsp;evaluates to&nbsp;<code>true</code>, the body of the loop inside the&nbsp;<code>do</code>&nbsp;statement is executed again.</li>



<li>The&nbsp;<code>condition</code>&nbsp;is evaluated once again.</li>



<li>If the&nbsp;<code>condition</code>&nbsp;evaluates to&nbsp;<code>true</code>, the body of the loop inside the&nbsp;<code>do</code>&nbsp;statement is executed again.</li>



<li>This process continues until the&nbsp;<code>condition</code>&nbsp;evaluates to&nbsp;<code>false</code>. Then the loop stops.</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="flowchart-of-do-while-loop">Flowchart of do&#8230;while Loop</h3>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-do-while-loop-flowchart.png" alt="C++ do...while loop flowchart" title="C++ do...while loop flowchart"/><figcaption class="wp-element-caption">Flowchart of C++ do&#8230;while loop</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example3">Example 3: Display Numbers from 1 to 5</h3>



<pre class="wp-block-code"><code>// C++ Program to print numbers from 1 to 5

#include &lt;iostream&gt;

using namespace std;

int main() {
    int i = 1; 

    // do...while loop from 1 to 5
    do {
        cout &lt;&lt; i &lt;&lt; " ";
        ++i;
    }
    while (i &lt;= 5);
    
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1 2 3 4 5</samp></pre>



<p>Here is how the program works.</p>



<figure class="wp-block-table"><table><tbody><tr><th>Iteration</th><th>Variable</th><th>i &lt;= 5</th><th>Action</th></tr><tr><td>&nbsp;</td><td><code>i = 1</code></td><td>not checked</td><td><samp>1</samp> is printed and <code>i</code> is increased to 2</td></tr><tr><td>1st</td><td><code>i = 2</code></td><td><code>true</code></td><td><samp>2</samp> is printed and <code>i</code> is increased to 3</td></tr><tr><td>2nd</td><td><code>i = 3</code></td><td><code>true</code></td><td><samp>3</samp> is printed and <code>i</code> is increased to 4</td></tr><tr><td>3rd</td><td><code>i = 4</code></td><td><code>true</code></td><td><samp>4</samp> is printed and <code>i</code> is increased to 5</td></tr><tr><td>4th</td><td><code>i = 5</code></td><td><code>true</code></td><td><samp>5</samp> is printed and <code>i</code> is increased to <strong>6</strong></td></tr><tr><td>5th</td><td><code>i = 6</code></td><td><code>false</code></td><td>The loop is terminated</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example4">Example 4: Sum of Positive Numbers Only</h3>



<pre class="wp-block-code"><code>// program to find the sum of positive numbers
// If the user enters a negative number, the loop ends
// the negative number entered is not added to the sum

#include &lt;iostream&gt;
using namespace std;

int main() {
    int number = 0;
    int sum = 0;

    do {
        sum += number;

        // take input from the user
        cout &lt;&lt; "Enter a number: ";
        cin &gt;&gt; number;
    }
    while (number &gt;= 0);
    
    // display the sum
    cout &lt;&lt; "\nThe sum is " &lt;&lt; sum &lt;&lt; endl;
    
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output 1</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a number: 6
Enter a number: 12
Enter a number: 7
Enter a number: 0
Enter a number: -2

The sum is 25</samp></pre>



<p>Here, the&nbsp;<code>do...while</code>&nbsp;loop continues until the user enters a negative number. When the number is negative, the loop terminates; the negative number is not added to the&nbsp;<code>sum</code>&nbsp;variable.</p>



<p><strong>Output 2</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a number: -6
The sum is 0.</samp></pre>



<p>The body of the&nbsp;<code>do...while</code>&nbsp;loop runs only once if the user enters a negative number.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="infinite-loop">Infinite while loop</h2>



<p>If the&nbsp;<code>condition</code>&nbsp;of a loop is always&nbsp;<code>true</code>, the loop runs for infinite times (until the memory is full). For example,</p>



<pre class="wp-block-code"><code>// infinite while loop
while(true) {
    // body of the loop
}</code></pre>



<p>Here is an example of an infinite&nbsp;<code>do...while</code>&nbsp;loop.</p>



<pre class="wp-block-code"><code>// infinite do...while loop

int count = 1;

do {
   // body of loop
} 
while(count == 1);</code></pre>



<p>In the above programs, the&nbsp;<code>condition</code>&nbsp;is always&nbsp;<code>true</code>. Hence, the loop body will run for infinite times.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="for-while">for vs while loops</h2>



<p>A&nbsp;<code>for</code>&nbsp;loop is usually used when the number of iterations is known. For example,</p>



<pre class="wp-block-code"><code>// This loop is iterated 5 times
for (int i = 1; i &lt;=5; ++i) {
   // body of the loop
}</code></pre>



<p>Here, we know that the for-loop will be executed 5 times.</p>



<p>However,&nbsp;<code>while</code>&nbsp;and&nbsp;<code>do...while</code>&nbsp;loops are usually used when the number of iterations is unknown. For example,</p>



<pre class="wp-block-code"><code>while (condition) {
    // body of the loop
}</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-while-and-do-while-loop/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++ For Loop</title>
		<link>https://harriscr7.github.io/imharris/c-for-loop/</link>
					<comments>https://harriscr7.github.io/imharris/c-for-loop/#respond</comments>
		
		<dc:creator><![CDATA[harrixxaeed]]></dc:creator>
		<pubDate>Mon, 15 May 2023 20:37:35 +0000</pubDate>
				<category><![CDATA[C++ Content]]></category>
		<category><![CDATA[C++ FlowControl]]></category>
		<guid isPermaLink="false">https://harriscr7.github.io/imharris/?p=191</guid>

					<description><![CDATA[In this tutorial, we will learn about the C++ for loop and its working with the help of some examples. In computer programming, loops are used to repeat a block of code. For example, let&#8217;s say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In this tutorial, we will learn about the C++ for loop and its working with the help of some examples.</p>



<p id="introduction">In computer programming, loops are used to repeat a block of code.</p>



<p>For example, let&#8217;s say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.</p>



<p>That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops.</p>



<p>There are 3 types of loops in C++.</p>



<ul>
<li><code>for</code>&nbsp;loop</li>



<li><code>while</code>&nbsp;loop</li>



<li><code>do...while</code>&nbsp;loop</li>
</ul>



<p>This tutorial focuses on C++&nbsp;<code>for</code>&nbsp;loop. We will learn about the other type of loops in the upcoming tutorials.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="for-loop">C++ for loop</h2>



<p>The syntax of for-loop is:</p>



<pre class="wp-block-code"><code>for (initialization; condition; update) {
    // body of-loop 
}</code></pre>



<p>Here,</p>



<ul>
<li><code>initialization</code>&nbsp;&#8211; initializes variables and is executed only once</li>



<li><code>condition</code>&nbsp;&#8211; if&nbsp;<code>true</code>, the body of&nbsp;<code>for</code>&nbsp;loop is executed<br>if&nbsp;<code>false</code>, the for loop is terminated</li>



<li><code>update</code>&nbsp;&#8211; updates the value of initialized variables and again checks the condition</li>
</ul>



<p>To learn more about&nbsp;<code>conditions</code>, check out our tutorial on&nbsp;<a href="https://www.programiz.com/cpp-programming/relational-logical-operators">C++ Relational and Logical Operators</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="flowchart-of-for-loop-in-c">Flowchart of for Loop in C++</h2>



<figure class="wp-block-image"><img decoding="async" src="https://cdn.programiz.com/sites/tutorial2program/files/cpp-for-loop-flowchart.png" alt="C++ for loop flowchart" title="C++ for loop flowchart"/><figcaption class="wp-element-caption">Flowchart of for loop in C++</figcaption></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example1">Example 1: Printing Numbers From 1 to 5</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;

using namespace std;

int main() {
        for (int i = 1; i &lt;= 5; ++i) {
        cout &lt;&lt; i &lt;&lt; " ";
    }
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1 2 3 4 5</samp></pre>



<p>Here is how this program works</p>



<figure class="wp-block-table"><table><tbody><tr><th>Iteration</th><th>Variable</th><th>i &lt;= 5</th><th>Action</th></tr><tr><td>1st</td><td><code>i = 1</code></td><td><code>true</code></td><td><samp>1</samp> is printed. <code>i</code> is increased to <code>2</code>.</td></tr><tr><td>2nd</td><td><code>i = 2</code></td><td><code>true</code></td><td><samp>2</samp> is printed. <code>i</code> is increased to <code>3</code>.</td></tr><tr><td>3rd</td><td><code>i = 3</code></td><td><code>true</code></td><td><samp>3</samp> is printed. <code>i</code> is increased to <code>4</code>.</td></tr><tr><td>4th</td><td><code>i = 4</code></td><td><code>true</code></td><td><samp>4</samp> is printed. <code>i</code> is increased to <code>5</code>.</td></tr><tr><td>5th</td><td><code>i = 5</code></td><td><code>true</code></td><td><samp>5</samp> is printed. <code>i</code> is increased to <code>6</code>.</td></tr><tr><td>6th</td><td><code>i = 6</code></td><td><code>false</code></td><td>The loop is terminated</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example2">Example 2: Display a text 5 times</h3>



<pre class="wp-block-code"><code>// C++ Program to display a text 5 times

#include &lt;iostream&gt;

using namespace std;

int main() {
    for (int i = 1; i &lt;= 5; ++i) {
        cout &lt;&lt;  "Hello World! " &lt;&lt; endl;
    }
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Hello World!
Hello World!
Hello World!
Hello World!
Hello World!</samp></pre>



<p>Here is how this program works</p>



<figure class="wp-block-table"><table><tbody><tr><th>Iteration</th><th>Variable</th><th>i &lt;= 5</th><th>Action</th></tr><tr><td>1st</td><td><code>i = 1</code></td><td><code>true</code></td><td><samp>Hello World!</samp> is printed and <code>i</code> is increased to <code>2</code>.</td></tr><tr><td>2nd</td><td><code>i = 2</code></td><td><code>true</code></td><td><samp>Hello World!</samp> is printed and <code>i</code> is increased to <code>3</code>.</td></tr><tr><td>3rd</td><td><code>i = 3</code></td><td><code>true</code></td><td><samp>Hello World!</samp> is printed and <code>i</code> is increased to <code>4</code>.</td></tr><tr><td>4th</td><td><code>i = 4</code></td><td><code>true</code></td><td><samp>Hello World!</samp> is printed and <code>i</code> is increased to <code>5</code>.</td></tr><tr><td>5th</td><td><code>i = 5</code></td><td><code>true</code></td><td><samp>Hello World!</samp> is printed and <code>i</code> is increased to <code>6</code>.</td></tr><tr><td>6th</td><td><code>i = 6</code></td><td><code>false</code></td><td>The loop is terminated</td></tr></tbody></table></figure>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example3">Example 3: Find the sum of first n Natural Numbers</h3>



<pre class="wp-block-code"><code>// C++ program to find the sum of first n natural numbers
// positive integers such as 1,2,3,...n are known as natural numbers

#include &lt;iostream&gt;

using namespace std;

int main() {
    int num, sum;
    sum = 0;

    cout &lt;&lt; "Enter a positive integer: ";
    cin &gt;&gt; num;

    for (int i = 1; i &lt;= num; ++i) {
        sum += i;
    }

    cout &lt;&lt; "Sum = " &lt;&lt; sum &lt;&lt; endl;

    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>Enter a positive integer: 10
Sum = 55</samp></pre>



<p>In the above example, we have two variables&nbsp;<var>num</var>&nbsp;and&nbsp;<var>sum</var>. The&nbsp;<var>sum</var>&nbsp;variable is assigned with&nbsp;<var>0</var>&nbsp;and the&nbsp;<var>num</var>&nbsp;variable is assigned with the value provided by the user.</p>



<p>Note that we have used a&nbsp;<code>for</code>&nbsp;loop.</p>



<pre class="wp-block-code"><code>for(int i = 1; i &lt;= num; ++i)</code></pre>



<p>Here,</p>



<ul>
<li><code>int i&nbsp;= 1</code>: initializes the&nbsp;<var>i</var>&nbsp;variable</li>



<li><code>i &lt;= num</code>: runs the loop as long as&nbsp;<var>i</var>&nbsp;is less than or equal to&nbsp;<var>num</var></li>



<li><code>++i</code>: increases the&nbsp;<var>i</var>&nbsp;variable by 1 in each iteration</li>
</ul>



<p>When&nbsp;<var>i</var>&nbsp;becomes&nbsp;<code>11</code>, the&nbsp;<code>condition</code>&nbsp;is&nbsp;<code>false</code>&nbsp;and&nbsp;<var>sum</var>&nbsp;will be equal to&nbsp;<code>0 + 1 + 2 + ... + 10</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading" id="ranged">Ranged Based for Loop</h2>



<p>In C++11, a new range-based&nbsp;<code>for</code>&nbsp;loop was introduced to work with collections such as&nbsp;<strong>arrays</strong>&nbsp;and&nbsp;<strong>vectors</strong>. Its syntax is:</p>



<pre class="wp-block-code"><code>for (variable : collection) {
    // body of loop
}</code></pre>



<p>Here, for every value in the&nbsp;<var>collection</var>, the for loop is executed and the value is assigned to the&nbsp;<var>variable</var>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="example-4-range-based-for-loop">Example 4: Range Based for Loop</h3>



<pre class="wp-block-code"><code>#include &lt;iostream&gt;

using namespace std;

int main() {
  
    int num_array&#91;] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
    for (int n : num_array) {
        cout &lt;&lt; n &lt;&lt; " ";
    }
  
    return 0;
}</code></pre>



<p><a href="https://www.programiz.com/cpp-programming/online-compiler" target="_blank" rel="noreferrer noopener">Run Code</a></p>



<p><strong>Output</strong></p>



<pre class="wp-block-preformatted"><samp>1 2 3 4 5 6 7 8 9 10</samp></pre>



<p>In the above program, we have declared and initialized an&nbsp;<code>int</code>&nbsp;array named&nbsp;<var>num_array</var>. It has 10 items.</p>



<p>Here, we have used a range-based&nbsp;<code>for</code>&nbsp;loop to access all the items in the array.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h3 class="wp-block-heading" id="infinite-loop">C++ Infinite for loop</h3>



<p>If the&nbsp;<code>condition</code>&nbsp;in a&nbsp;<code>for</code>&nbsp;loop is always&nbsp;<code>true</code>, it runs forever (until memory is full). For example,</p>



<pre class="wp-block-code"><code>// infinite for loop
for(int i = 1; i &gt; 0; i++) {
    // block of code
}</code></pre>



<p>In the above program, the&nbsp;<code>condition</code>&nbsp;is always&nbsp;<code>true</code>&nbsp;which will then run the code for infinite times.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p>Check out these examples to learn more:</p>



<ul>
<li><a href="https://www.programiz.com/cpp-programming/examples/sum-natural-number">C++ Program to Calculate Sum of Natural Numbers</a></li>



<li><a href="https://www.programiz.com/cpp-programming/examples/factorial">C++ Program to Find Factorial</a></li>



<li><a href="https://www.programiz.com/cpp-programming/examples/multiplication-table">C++ Program to Generate Multiplication Table</a></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p>In the next tutorial, we will learn about&nbsp;<code>while</code>&nbsp;and&nbsp;<code>do...while</code>&nbsp;loop.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://harriscr7.github.io/imharris/c-for-loop/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
